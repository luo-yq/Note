

<dependency>
			<groupId>org.directwebremoting</groupId>
			<artifactId>dwr</artifactId>
			<version>3.0.M1</version>
		</dependency>





<servlet>
		<servlet-name>hello</servlet-name>
		<servlet-class>org.directwebremoting.servlet.DwrServlet</servlet-class>
		<init-param>
			<param-name>debug</param-name>
			<param-value>true</param-value>
			<!--/dwr/test/service1可测试 -->
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>hello</servlet-name>
		<url-pattern>/dwr/*</url-pattern>
	</servlet-mapping>




	<?xml version="1.0" encoding="UTF-8"?>
<dwr>
	<allow>
		<create creator="new" javascript="service">
			<param name="class" value="com.Bike" />
		</create>
		<create creator="new" javascript="service1">
			<param name="class" value="com.Hello" />
		</create>
		<create creator="new" javascript="service2" scope="application">
			<param name="class" value="com.Service" />
		</create>
	</allow>

	<!-- 聊天消息调用接口 -->
	<create creator="new" javascript="ChatWithSamePage" scope="application">
		<param name="class" value="cn.netjava.dwr.ChatWithSamePage" />
	</create>
	<convert match="cn.netjava.dwr.WebMessage" converter="bean" />
</dwr>








import java.util.Collection;
import java.util.LinkedList;
import java.util.List;

import org.directwebremoting.ScriptSession;
import org.directwebremoting.WebContext;
import org.directwebremoting.WebContextFactory;
import org.directwebremoting.proxy.dwr.Util;

/**
 * 通知消息调用java对象
 */
public class ChatWithSamePage {
	/**
	 * @param text
	 *            The new message text to add
	 */
	public void sendWebMessage(String text) {
		WebContext wctx = WebContextFactory.get();
		String remoteAdd = wctx.getHttpServletRequest().getRemoteAddr();
		text = "来自" + remoteAdd + "的朋友说：" + text;
		// Make sure we have a list of the list 10 messages
		if (text != null && text.trim().length() > 0) {
			messages.addFirst(new WebMessage(text));
			while (messages.size() > 10) {
				messages.removeLast();
			}
		}
		// 将队列中的消息通知到所有客户端
		notifyAllClient(wctx, messages);
	}

	public void notifyAllClient(WebContext wctx, List msgQueue) {
		String currentPage = wctx.getCurrentPage();
		// Clear the input box in the browser that kicked off this page only
		Util utilThis = new Util(wctx.getScriptSession());
		utilThis.setValue("text", "");
		// For all the browsers on the current page:
		Collection<ScriptSession> sessions = wctx.getScriptSessionsByPage(currentPage);
		Util utilAll = new Util(sessions);
		// Clear the list and add in the new set of messages
		utilAll.removeAllOptions("chatlog");
		utilAll.addOptions("chatlog", messages, "text");
	}

	/**
	 * The current set of messages
	 */
	private LinkedList messages = new LinkedList();
}







<!--引入dwr的js脚本-->
<script src="dwr/interface/ChatWithSamePage.js"></script>
<script src="dwr/engine.js" /></script>
<script src="dwr/util.js" /></script>
<script type="text/javascript">
	function sendMessage() {
		ChatWithSamePage.sendWebMessage(dwr.util.getValue("text"));
	}
</script>
<body>
	<pre>
发送内容：
<input type="text" id="text"
			onkeypress="dwr.util.onReturn(event, sendMessage)" />
<input type="button" value="Send" onclick="sendMessage();" />
<hr>
<ul id="chatlog" style="list-style-type: none;">
</ul>
</pre>
</body>












