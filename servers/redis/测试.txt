Redis 性能测试是通过同时执行多个命令实现的。
语法
redis 性能测试的基本命令如下：
redis-benchmark [option] [option value]
以下实例同时执行 10000 个请求来检测性能：
redis-benchmark -n 10000

PING_INLINE: 141043.72 requests per second
PING_BULK: 142857.14 requests per second
SET: 141442.72 requests per second
GET: 145348.83 requests per second
INCR: 137362.64 requests per second
LPUSH: 145348.83 requests per second
LPOP: 146198.83 requests per second
SADD: 146198.83 requests per second
SPOP: 149253.73 requests per second
LPUSH (needed to benchmark LRANGE): 148588.42 requests per second
LRANGE_100 (first 100 elements): 58411.21 requests per second
LRANGE_300 (first 300 elements): 21195.42 requests per second
LRANGE_500 (first 450 elements): 14539.11 requests per second
LRANGE_600 (first 600 elements): 10504.20 requests per second
MSET (10 keys): 93283.58 requests per second

-h	指定服务器主机名	127.0.0.1
-p	指定服务器端口	6379
-s	指定服务器 socket	
-c	指定并发连接数,即线程数	50
-n	指定请求数	10000
-d	以字节的形式指定 SET/GET 值的数据大小	2
-k	1=keep alive 0=reconnect	1
-r	SET/GET/INCR 使用随机 key, SADD 使用随机值	
-P	通过管道传输 <numreq> 请求	1
-q	强制退出 redis。仅显示 query/sec 值	
--csv	以 CSV 格式输出	
-l	生成循环，永久执行测试	
-t	运行以,分隔的测试命令列表。	ping_inline,ping_bulk,set,get,incr,lpush,lpop,sadd,spop,lpush,lrange_100,lrange_300,lrange_500,lrange_600,lrange,mset
-I	Idle 模式。仅打开 N 个 idle 连接并等待。	
实例
redis-benchmark -h 127.0.0.1 -p 6379 -t set,lpush -n 10000 -q

直接执行lua脚本模拟客户端
redis-benchmark -n 100000 -q script load "redis.call('set','foo','bar')"

Redis-benchmark还有一个作用就是灌数据，例如下列测试场景，我们对某个系统常用redis API进行测试，下列是一个测试hget、hset的过程，我们首先利用__rand_int__进行随机整数获取，对myhash这个key进行测试数据灌入（这也就测试了hset性能），然后再对其进行hget：

redis-benchmark -a pass -h 40.XXX.XXX.141 -p 16XXXX -r 500000 -n 500000 hset myhash __rand_int__ __rand_int__ 

注意：上述测试由于是取的随机值，因此hget可能没有命中，同时payload比较小，所以这是个极限性能。




7.1 模拟oom
redis-cli debug oom
redis直接退出。

7.2 模拟宕机
redis-cli debug segfault

7.3 模拟hang
redis-cli -p 6379 DEBUG sleep 30

7.4 快速产生测试数据
redis-cli debug populate n
测试利器，快速产生大量的key

7.5 模拟RDB load情形
redis-cli debug reload
save当前的rdb文件，并清空当前数据库，重新加载rdb，加载与启动时加载类似，加载过程中只能服务部分只读请求（比如info、ping等）： rdbSave(); emptyDb(); rdbLoad();

7.6 模拟AOF加载情形
redis-cli debug loadaof
清空当前数据库，重新从aof文件里加载数据库 emptyDb(); loadAppendOnlyFile();






6.1.1 探测服务是否可用 ping 返回PONG说明正常
6.1.2 探测服务延迟 redis-cli --latency 显示的单位是milliseconds，作为参考，千兆网一跳一般延迟为0.16ms左右
6.1.3 监控正在请求执行的命令 在cli下执行monitor，生产环境慎用。
6.1.4 查看统计信息

	Mrds:6379> info
	在cli下执行info。

	info Replication
	只看其中一部分。

	config resetstat
	重新统计。

	#Server

	redis_version:2.8.19 ###redis版本号
	redis_git_sha1:00000000  ###git SHA1
	redis_git_dirty:0   ###git dirty flag
	redis_build_id:78796c63e58b72dc
	redis_mode:standalone   ###redis运行模式
	os:Linux 2.6.32-431.el6.x86_64 x86_64   ###os版本号
	arch_bits:64  ###64位架构
	multiplexing_api:epoll  ###调用epoll算法
	gcc_version:4.4.7   ###gcc版本号
	process_id:25899   ###服务器进程PID
	run_id:eae356ac1098c13b68f2b00fd7e1c9f93b1c6a2c   ###Redis的随机标识符(用于sentinel和集群)
	tcp_port:6379   ###Redis监听的端口号
	uptime_in_seconds:6419 ###Redis运行时长(s为单位)
	uptime_in_days:0  ###Redis运行时长(天为单位)
	hz:10
	lru_clock:10737922  ###以分钟为单位的自增时钟,用于LRU管理
	config_file:/etc/redis/redis.conf   ###redis配置文件

	# Clients
	connected_clients:1   ###已连接客户端的数量（不包括通过从属服务器连接的客户端）这个参数也要一定关注，有飙升和明显下降时都会有问题。即使不操作
	client_longest_output_list:0   ###当前连接的客户端中最长的输出列表
	client_biggest_input_buf:0   ###当前连接的客户端中最大的。输出缓存
	blocked_clients:0  ###正在等待阻塞命令（BLPOP、BRPOP、BRPOPLPUSH）的客户端的数量 需监控

	# Memory
	used_memory:2281560   ###由 Redis 分配器分配的内存总量，以字节（byte）为单位
	used_memory_human:2.18M   ###以更友好的格式输出redis占用的内存
	used_memory_rss:2699264   ###从操作系统的角度，返回 Redis 已分配的内存总量（俗称常驻集大小）。这个值和 top 、 ps 等命令的输出一致，包含了used_memory和内存碎片。
	used_memory_peak:22141272  ### Redis 的内存消耗峰值（以字节为单位）
	used_memory_peak_human:21.12M  ###以更友好的格式输出redis峰值内存占用
	used_memory_lua:35840  ###LUA引擎所使用的内存大小
	mem_fragmentation_ratio:1.18  ###   =used_memory_rss /used_memory 这两个参数都包含保存用户k-v数据的内存和redis内部不同数据结构需要占用的内存，并且RSS指的是包含操作系统给redis实例分配的内存，这里面还包含不连续分配所带来的开销。因此在理想情况下， used_memory_rss 的值应该只比 used_memory 稍微高一点儿。当 rss > used ，且两者的值相差较大时，表示存在（内部或外部的）内存碎片。内存碎片的比率可以通过 mem_fragmentation_ratio 的值看出。当 used > rss 时，表示 Redis 的部分内存被操作系统换出到交换空间了，在这种情况下，操作可能会产生明显的延迟。可以说这个值大于1.5或者小于1都是有问题的。当大于1.5的时候需要择机进行服务器重启。当小于1的时候需要对redis进行数据清理
	mem_allocator:jemalloc-3.6.0

	# Persistence
	loading:0  ###记录服务器是否正在载入持久化文件，1为正在加载
	rdb_changes_since_last_save:0   ###距离最近一次成功创建持久化文件之后，产生了多少次修改数据集的操作
	rdb_bgsave_in_progress:0   ###记录了服务器是否正在创建 RDB 文件，1为正在进行
	rdb_last_save_time:1420023749  ###最近一次成功创建 RDB 文件的 UNIX 时间戳
	rdb_last_bgsave_status:ok   ###最近一次创建 RDB 文件的结果是成功还是失败,失败标识为err，这个时候写入redis 的操作可能会停止，因为默认stop-writes-on-bgsave-error是开启的，这个时候如果需要尽快恢复写操作，可以手工将这个选项设置为no。
	rdb_last_bgsave_time_sec:0  ###最近一次创建 RDB 文件耗费的秒数
	rdb_current_bgsave_time_sec:-1  ###如果服务器正在创建 RDB 文件，那么这个域记录的就是当前的创建操作已经耗费的秒数
	aof_enabled:1   ###AOF 是否处于打开状态，1为启用
	aof_rewrite_in_progress:0   ###服务器是否正在创建 AOF 文件
	aof_rewrite_scheduled:0   ###RDB 文件创建完毕之后，是否需要执行预约的 AOF 重写操作（因为在RDB时aof的rewrite会被阻塞一直到RDB结束）
	aof_last_rewrite_time_sec:-1  ###最近一次创建 AOF 文件耗费的时长
	aof_current_rewrite_time_sec:-1  ###如果服务器正在创建 AOF 文件，那么这个域记录的就是当前的创建操作已经耗费的秒数
	aof_last_bgrewrite_status:ok  ###最近一次创建 AOF 文件的结果是成功还是失败
	aof_last_write_status:ok 
	aof_current_size:176265  ###AOF 文件目前的大小
	aof_base_size:176265  ###服务器启动时或者 AOF 重写最近一次执行之后，AOF 文件的大小
	aof_pending_rewrite:0  ###是否有 AOF 重写操作在等待 RDB 文件创建完毕之后执行
	aof_buffer_length:0   ###AOF 缓冲区的大小
	aof_rewrite_buffer_length:0  ###AOF 重写缓冲区的大小
	aof_pending_bio_fsync:0  ###后台 I/O 队列里面，等待执行的 fsync 调用数量
	aof_delayed_fsync:0###被延迟的 fsync 调用数量
	loading_start_time:1441769386   loading启动时间戳
	loading_total_bytes:1787767808   loading需要加载数据量
	loading_loaded_bytes:1587418182  已经加载的数据量
	loading_loaded_perc:88.79 加载百分比
	loading_eta_seconds:7   剩余时间

	# Stats
	total_connections_received:8466  ###服务器已接受的连接请求数量，注意这是个累计值。
	total_commands_processed:900668   ###服务器已执行的命令数量，这个数值需要持续监控，如果在一段时间内出现大范围波动说明系统要么出现大量请求，要么出现执行缓慢的操作。
	instantaneous_ops_per_sec:1   ###服务器每秒钟执行的命令数量
	total_net_input_bytes:82724170
	total_net_output_bytes:39509080
	instantaneous_input_kbps:0.07
	instantaneous_output_kbps:0.02
	rejected_connections:0  ###因为最大客户端数量限制而被拒绝的连接请求数量
	sync_full:2
	sync_partial_ok:0
	sync_partial_err:0
	expired_keys:0   ###因为过期而被自动删除的数据库键数量
	evicted_keys:0   ###因为最大内存容量限制而被驱逐（evict）的键数量。这个数值如果不是0则说明maxmemory被触发，并且   evicted_keys一直大于0，则系统的latency增加，此时可以临时提高最大内存，但这只是临时措施，需要从应用着手分析。
	keyspace_hits:0  ###查找数据库键成功的次数。可以计算命中率
	keyspace_misses:500000   ###查找数据库键失败的次数。
	pubsub_channels:0  ###目前被订阅的频道数量
	pubsub_patterns:0  ###目前被订阅的模式数量
	latest_fork_usec:402  ###最近一次 fork() 操作耗费的毫秒数

	# Replication
	role:master   ###如果当前服务器没有在复制任何其他服务器，那么这个域的值就是 master ；否则的话，这个域的值就是 slave 。注意，在创建复制链的时候，一个从服务器也可能是另一个服务器的主服务器
	connected_slaves:2   ###2个slaves
	slave0:ip=192.168.65.130,port=6379,state=online,offset=1639,lag=1
	slave1:ip=192.168.65.129,port=6379,state=online,offset=1639,lag=0
	master_repl_offset:1639
	repl_backlog_active:1
	repl_backlog_size:1048576
	repl_backlog_first_byte_offset:2
	repl_backlog_histlen:1638

	# CPU
	used_cpu_sys:41.87  ###Redis 服务器耗费的系统 CPU
	used_cpu_user:17.82  ###Redis 服务器耗费的用户 CPU
	used_cpu_sys_children:0.01  ###后台进程耗费的系统 CPU
	used_cpu_user_children:0.01  ###后台进程耗费的用户 CPU

	# Keyspace
	db0:keys=3101,expires=0,avg_ttl=0   ###keyspace 部分记录了数据库相关的统计信息，比如数据库的键数量、数据库过期键数量等。对于每个数据库，这个部分都会添加一行此信息


6.1.5 获取慢查询
	SLOWLOG GET 10  结果为查询ID、发生时间、运行时长和原命令 默认10毫秒，默认只保留最后的128条。单线程的模型下，一个请求占掉10毫秒是件大事情，注意设置和显示的单位为微秒，注意这个时间是不包含网络延迟的。
	slowlog get 获取慢查询日志
	slowlog len 获取慢查询日志条数
	slowlog reset 清空慢查询

6.1.6 查看客户端
	client list  列出所有连接
	client kill   杀死某个连接， 例如CLIENT KILL 127.0.0.1:43501
	client getname #  获取连接的名称 默认nil
	client setname "名称"   设置连接名称,便于调试

6.1.7 查看日志  日志位置在/redis/log下，redis.log为redis主日志，sentinel.log为sentinel监控日志。
6.2 并发延迟检查
	top看到单个CPU 100%时，就是垂直扩展的时候了。如果需要让CPU使用率最大化，可以配置Redis实例数对应CPU数, Redis实例数对应端口数(8核Cpu, 8个实例, 8个端口), 以提高并发。单机测试时, 单条数据在200字节, 测试的结果为8~9万tps。（未实测）。 另外，对于命令的复杂度一定要关注。
6.2.1 检查CPU情况 mpstat -P ALL 1
6.2.2 检查网络情况
	可以在系统不繁忙或者临时下线前检测客户端和server或者proxy 的带宽：
	1)使用 iperf -s 命令将 Iperf 启动为 server 模式:
	iperf –s
	————————————————————
	Server listening on TCP port 5001
	TCP window size: 8.00 KByte (default)
	————————————————————
	2)启动客户端，向IP为10.230.48.65的主机发出TCP测试，并每2秒返回一次测试结果，以Mbytes/sec为单位显示测试结果：
	iperf -c 10.230.48.65 -f M -i 2
6.2.3 检查系统情况  着重检查探测服务延迟、 监控正在请求执行的命令、获取慢查询
6.2.4 检查连接数  查看info里面的total_connections_received，如果该值不断升高，则需要修改应用，采用连接池方式进行，因为频繁关闭再创建连接redis的开销很大。
6.2.5 检查持久化  RDB的时间：latest_fork_usec:936 上次导出rdb快照,持久化花费，微秒。 检查是否有人使用了SAVE。
6.2.6 检查命令执行情况  INFO commandstats  查看命令执行了多少次，执行命令所耗费的毫秒数(每个命令的总时间和平均时间)
