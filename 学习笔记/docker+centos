centos在国内发展较快，所谓的性能问题应会逐渐被解决。

1. 安装docker
#检查版本 要求64位，内核>3.10
uname -r

使用root或sudo执行
#更新yum资源
yum -y update
#两种安装方式
yum -y install docker-io
#curl -fsSL https://get.docker.com/ | sh

vi /etc/sysconfig/docker
# /etc/sysconfig/docker

# Modify these options if you want to change the way the docker daemon runs

OPTIONS='--selinux-enabled=false  --log-driver=journald --signature-verification=false'
if [ -z "${DOCKER_CERT_PATH}" ]; then
    DOCKER_CERT_PATH=/etc/docker
fi

:wq 


#启动docker
service docker start
#测试docker
docker run hello-world


#添加镜像加速
#网易加速器：http://hub-mirror.c.163.com
#官方中国加速器(只含一些公有镜像)：https://registry.docker-cn.com
#ustc的镜像：https://docker.mirrors.ustc.edu.cn


vi /etc/docker/daemon.json

{
  "registry-mirrors": ["http://hub-mirror.c.163.com"]
}


docker pull registry
docker pull nginx:alpine
docker pull tomcat:7-alpine
docker pull tomcat:8-alpine
docker pull jenkins:alpine
docker pull redis:alpine
docker pull rabbitmq:management-alpine
docker pull mvertes/alpine-mongo
docker pull postgres:alpine

docker pull solr:alpine
docker pull httpd:alpine
docker pull node:alpine
docker pull haproxy:alpine
docker pull memcached:alpine
docker pull webcenter/activemq 
docker pull gizmotronic/openfire:4.2.3 

docker pull google/cadvisor  docker 监控
docker pull zookeeper
docker pull consul
docker pull storm
docker pull rocket.chat
docker pull redmine
docker pull idoop/zentao
docker pull sebp/elk
docker pull mysql:5.6
docker pull apache/nutch
docker pull robertoandrade/jitsi-meet
docker pull stilliard/pure-ftpd
docker pull probablyfine/flume
docker pull wordpress  cms建站平台 php 
docker pull wurstmeister/kafka
docker pull garethflowers/svn-server
docker pull sonatype/nexus
docker pull eroadltd/jmeter
docker pull tvial/docker-mailserver


docker pull alpine
docker pull centos:7
docker pull ubuntu:16.04

docker pull cloudera/quickstart 
docker pull sath89/oracle-12c



#私有仓库需要越狱Google创建账号
#启动镜像私有仓库，默认存储路径为 /opt/data/registry
docker run -d -p 5000:5000 registry 

docker login

#标记镜像
docker tag
#将标记的镜像上传到私有仓库
docker push

#下载镜像
docker pull 

#根据以下命令，编写项目启动文件



#使用守护进程-d 80端口映射 nginx 镜像的80端口,挂载配置文件
docker run --name nginx -p 80:80 -v $PWD/www:/www -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf -v $PWD/logs:/wwwlogs  -d nginx
#将主机中当前目录下的test挂载到容器的/usr/local/tomcat/webapps/test，  --privileged=true 给予权限
docker run --privileged=true --name tomcat -p 8080:8080 -v $PWD/test:/usr/local/tomcat/webapps/test -d tomcat  


#安装jenkins
docker pull jenkins
#jenkins要求文件所属用户为1000
mkdir jenkins
chown -R 1000:1000 jenkins/
#启动
docker run --privileged=true --name jenkins -p 8081:8080 -p 50000:50000  -v $PWD/jenkins:/var/jenkins_home -d jenkins

#访问地址
http://192.168.1.10:8081/

cat jenkins/secrets


#镜像资源地址
https://hub.docker.com/ 


#安装svn （svnsever）
mkdir svn
docker run \
    --name svn-server \
    -d \
    --privileged=true  -v $PWD/svn:/var/opt/svn \
    -p 8082:3690 \
    garethflowers/svn-server

#使用svnadmin创建仓库
docker exec -it svn-server svnadmin create repos

修改 repos/conf下的配置文件

vi svnserve.conf配置如下：

[general]
anon-access = none　　　　#使非授权用户无法访问
auth-access = write　　　　#使授权用户有写权限
password-db = passwd　　#指明密码文件路径
authz-db = authz　　　　　#访问控制文件

配置用户： vi passwd 配置说明如下：

[users]
user1 = 123　　　　#用户名 = 密码
user2 = 123　　　　#用户名 = 密码

配置权限：vi authz 常用配置说明如下：

[group]
group1 = user1,user2　　#组中用户与passwd中对应

[repo:/]
user1 = rw　　　　　 #单用户
@group1 = rw　　　　#@表示组
*=r　　　　　　　　　 #表示所有用户

仓库下目录配置
[repo:/folder1]　　　　#仓库下的folder1目录，权限配置与上面相同














#交互
#ubuntu
docker exec -it 容器名 /bin/bash
#alpine
docker exec -it 容器名 /bin/sh





#启动docker监控，
mkdir -p /var/run /var/lib/docker /dev/disk 

mount -o remount,rw '/cadvisor/sys/fs/cgroup'
sudo ln -s /sys/fs/cgroup/cpu,cpuacct /sys/fs/cgroup/cpuacct,cpu

docker run \
  --privileged=true \
  --volume=/:/rootfs:ro \
  --volume=/var/run:/var/run:rw \
  --volume=/var/lib/docker/:/var/lib/docker:ro \
  --publish=10001:8080 \
  --detach=true \
  --name=cadvisor \
  google/cadvisor:latest


  --volume=/sys:/sys:ro \



#启动nginx
#后台 http://localhost/

rm -rf ~/nginx
mkdir -p ~/nginx/conf80

cd ~/nginx


docker run --privileged=true --name nginx80  -p 80:80 -d  nginx:alpine

docker cp nginx80:/etc/nginx/conf.d $PWD/conf80/conf.d
docker cp nginx80:/etc/nginx/nginx.conf $PWD/conf80/nginx.conf

docker stop nginx80
docker rm nginx80

docker run --privileged=true --name nginx80 \
  -v $PWD/conf80/conf.d:/etc/nginx/conf.d:ro \
  -v $PWD/conf80/nginx.conf:/etc/nginx/nginx.conf:ro \
  -p 80:80 -d  nginx:alpine


vi ~/nginx/conf80/conf.d


upstream tomcat_oa{
        server 192.168.22.106:8081;
        server 192.168.22.106:8082;
        server 192.168.22.106:8083;
    }

#proxy_pass的结尾是/会取代匹配值，结尾不是/只会取代ip和端口
server{
    location /oa/ {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_pass http://tomcat_oa/;
    }   
}

docker restart nginx80

#启动Tomcat
mkdir ~/tomcat/webapps  
cd ~/tomcat 
docker run --name tomcat8081 --privileged=true -v $PWD/webapps:/usr/local/tomcat/webapps -p 8081:8080 -d tomcat:8-alpine   
docker run --name tomcat8082 --privileged=true -v $PWD/webapps:/usr/local/tomcat/webapps -p 8082:8080 -d tomcat:8-alpine 
docker run --name tomcat8083 --privileged=true -v $PWD/webapps:/usr/local/tomcat/webapps -p 8083:8080 -d tomcat:8-alpine     


#启动Jenkins



#启动elk
#需要先修改主机的配置
vi /etc/sysctl.conf 

vm.max_map_count=655360

sysctl -p

#5601 (Kibana web interface).
#9200 (Elasticsearch JSON interface).
#5044 (Logstash
docker run --name elk -p 5601:5601 -p 9200:9200 -p 9300:9300 -p 5044:5044 -d sebp/elk
 
#启动rabbitmq
#后台 http://localhost:15672/
docker run -d --name rabbitmq -p 5671:5671 -p 5672:5672 -p 4369:4369 -p 25672:25672 -p 15671:15671 -p 15672:15672 rabbitmq:management-alpine

#启动mysql
mkdir -p ~/mysql/data ~/mysql/logs ~/mysql/conf
cd ~/mysql
docker run --name mysql -p 3306:3306 -v $PWD/conf:/etc/mysql/conf.d -v $PWD/logs:/logs -v $PWD/data:/var/lib/mysql \
  -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.6


历史总结
echo '870705' | sudo -S bin/mysqld_safe --skip-grant-tables &



#启动redis
mkdir -p ~/redis ~/redis/data
cd ~/redis
docker run --name redis -p 6379:6379 -v $PWD/data:/data  -d redis:alpine redis-server --appendonly yes

docker exec -it redis redis-cli


#启动oracle
docker run --name oracle -p 18080:8080 -p 1521:1521 -d sath89/oracle-12c
#默认配置
#hostname: localhost
#port: 1521
#sid: xe
#service name: xe
#username: system
#password: oracle

#默认控制台
#http://localhost:8080/em
#user: sys
#password: oracle
#connect as sysdba: true

-e WEB_CONSOLE=false
-e ORACLE_SID=orcl 

#登录oracle
docker exec -it oracle /bin/bash


ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;

alter user SYSTEM account unlock


#启动mongo

docker run -d --name mongo -p 27017:27017 mvertes/alpine-mongo

#启动cloudera
docker run --name cloudera --hostname=quickstart.cloudera --privileged=true -p 7180:7180 -p 7280:80 -d cloudera/quickstart /usr/bin/docker-quickstart

#需要8G内存
docker exec cloudera /home/cloudera/cloudera-manager --express



#openfire
docker run --name openfire -d --restart=always \
  --publish 19090:9090 --publish 19091:9091 --publish 5222:5222 --publish 7777:7777 \
  --volume /srv/docker/openfire:/var/lib/openfire \
  gizmotronic/openfire:4.2.3
#日志查看
docker exec -it openfire tail -f /var/log/openfire/info.log
#java虚拟机处理:
docker run -name openfire -d \
  [DOCKER_OPTIONS] \
  gizmotronic/openfire:4.2.3 \
  -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode
#SELinux 处理:
mkdir -p /srv/docker/openfire
chcon -Rt svirt_sandbox_file_t /srv/docker/openfire
#设置
http://192.168.195.101:9090



#rocketchat 以 mongo 为数据库进行添加
docker run -d --name mongo -p 27017:27017 mvertes/alpine-mongo 
docker run --name rocketchat -p 3000:3000 --env ROOT_URL=http://192.168.195.101 --env MONGO_URL=mongodb://192.168.195.101/mydb -d rocket.chat
#设置管理员和登录或注册地址
http://192.168.195.101:3000




docker run --name postgres -p 5432:5432 -e POSTGRES_PASSWORD=123456 -d postgres:alpine






