Web安全开发注意事项

1.sql注入：不要拼字符串，过滤关键字，通过过滤关键字可以具有针对性的处理一些功能，如登录。

2.登录安全：在设置密码之类的功能上应加入密码强度要求。首次登录时应强制要求修改密码，尤其是管理员密码应当特别注意。异地登录处理，多客户端同时登录处理。

3.防穷举破密码：适当的加入验证码，防止别人用程序穷举账户密码。密码错误次数应该限制，并提供解除限制方案。

4.XSS：俗称跨站脚本攻击。用户把HTML、JS之类的标签输入到编辑框，入库之后，再显示的时候可以导致版面错误、JS能解析执行之类的都属于XSS的范畴。
如果是攻击者插个隐藏Iframe就可以偷偷盗取用户数据或进行其他危险行为。
应从两方面解决，1：后台存取数据时过滤字符，2：前端读取数据时不应当使用字符串拼接

5.CSRF攻击：通过链接获取cookie。防御策略都不太完善。
防御CSRF攻击：
       目前防御 CSRF 攻击主要有三种策略：
       验证 HTTP Referer 字段；古老浏览器referer可篡改，即使新浏览器部分用户会禁止传递referer会导致被禁用，有缺陷。
       在请求地址中添加 token 并验证；token不能存在cookie中，token本身容易被获取到，另外开发时所有请求都要加token比较麻烦
       在 HTTP 头中自定义属性并验证。所有请求都要使用XMLHttpRequest，且只能处理Ajax请求

6.防止二次请求：token被获取后，可以模拟二次请求，对token应当一次请求一次修改。

7.上传：
   做好上传权限，做好上传日志记录。
   不能让用户定义路径、文件名，限制好可上传的文件类型（尤其预防病毒文件）。
   应当防止以上传文件被篡改，普通文件可以简单的做md5校验，加密文件做好文件加密和签名。

8.下载：（不一定必须点击下载按钮，如显示图片本身就包含下载文件的过程）获取文件服务器文件过程本身就是个下载过程
   做好读取文件权限，做好读取文件日志，做好文件篡改验证。

9.功能权限（不是菜单权限）：功能权限应当最小化，不应当因为分配一个功能而导致其它相关的功能被附带。

10.配置文件加密：web后台连接数据库密码应加密，避免通过配置文件泄露数据库密码。

11.后台数据格式、长度、合法性等验证

12.页面缓存处理：由于回退功能会绕过后台，页面敏感数据的页面应当禁止缓存
解决方案：配置filter对存放敏感信息的页面限制页面缓存。如：
httpResponse.setHeader("Cache-Control","no-cache"); 
httpResponse.setHeader("Cache-Control","no-store");
httpResponse.setDateHeader("Expires", 0);
httpResponse.setHeader("Pragma","no-cache");

13.如果是http请求还应注意数据安全：数据签名和加密（非对称）

14.web容器（tomcat）安全





集群问题：
当前架构中的文件处理还不支持集群。
在不修改当前框架基础的，一个方案是通过同步工具进行文件同步，并统一web访问地址。缺陷是有轻微的延迟。
























9.第三方控件：使用第三方控件，应经过严格的审核（很多第三方控件上作者故意留有缺陷），并且剔除不必要的功能再使用。








总之一句话，开发过程中，不要相信用户提交的任何数据，规划好目录，做到权限最小化，关闭、删除不必要的东西，就相对会安全很多了。

cert 安全编码建议：
1、验证输入：从不可信任的数据源中进行的输入需要验证。合适的输入验证能减少大量软件的弱点。必须对大部分的数据源持怀疑的态度，包括命令行参数，网络接口，环境变量及用户文件。
2、留言编译器警告：编译代码时使用编译器的最高警告级别，通过修改代码来减少警告。
3、针对安全策略的架构和设计：构建软件架构和设计软件时采用安全策略。例如：如果系统在不同的时间需要不同的权限，则考虑将系统分成不同的互相通信的子系统，每个系统拥有合适的权限。
4、保持简单性：设计越简单越好，复杂的设计提高了实现时错误的可能性。
5、默认拒绝：默认的访问策略建立在允许的基础上。也就是说，默认的访问是拒绝的，除非标明是允许的。
6、最小权限原则：每个进程拥有完成工作所需的最小权限。任何权限的拥有时间要尽可能的短。这一方法能阻止攻击者利用权限提升执行任意代码的机会。
7、清洁发送给其他系统的数据：清洁所有发送给复杂子系统的数据，例如：命令外壳（shells），关系数据库，商用组件。攻击者可能通过SQL命令或者注入进行攻击。这不是靠子系统通过输入验证来避免的问题，因为子系统不清楚调用的上下文，而调用过程指导上下文，所以有责任在调用子系统时清洁数据。
8、纵深防御：这是一个通用的安全原则，从多个防御策略中规避风险，如果一层防御失效，则另一层防御还在发挥作用。
9、使用有效的安全质量保证技术：好的质量保证技术能有效的发现和消除弱点。渗透测试、Fuzz测试，以及源代码审计都能作为一种有效的质量保证措施。独立的安全审查能够建立更安全的系统。
10、采用安全编码标准：为开发语言和平台指定安全编码标准，并采用这些标准。
