ab全称为：apache bench   文件位于 apache/bin/
ab是Apache超文本传输协议(HTTP)的性能测试工具。其设计意图是描绘当前所安装的Apache的执行性能，主要是显示你安装的Apache每秒可以处理多少个请求。
ab是apache自带的压力测试工具。ab非常实用，它不仅可以对apache服务器进行网站访问压力测试，也可以对或其它类型的服务器进行压力测试。比如nginx、tomcat、IIS等。

1、使用post方式发送数据才需要一个文件保存数据，假如使用get方式发送数据，直接将数据放在后面即可，如携带tokenId参数 
ab -n 100   http://localhost:8080/admin/auth/quickAuth?tokenId=1111
2、post 发送一个 json格式数据
ab -p C:/Users/zcr/Desktop/postjson.txt -T application/json -c 10 -n 2000 http://172.18.97.17:8080/admin/auth
ab -n 100 -p D:/Desktop/temp/post/post.txt -T 'application/x-www-form-urlencoded' http://172.18.97.17:8080/admin/auth
注意： 'application/x-www-form-urlencoded'有些系统需要去掉 ' 
 
文件D:/Desktop/temp/post/post.txt中数据（该url需要接收tokenId这个请求）
tokenId=be4afc178e5c2526ac99289cda93399dd4e	 
假如需要多个请求可以使用&隔开，如下所示：
tokenId=be4afc178e5c2526ac99289cda93399dd4e
userName=admin&password=e10adc3949ba59abbe56e057f20f883e

参数的介绍
-n在测试会话中所执行的请求个数。默认时，仅执行一个请求。
-c一次产生的请求个数。默认是一次一个。
-t测试所进行的最大秒数。其内部隐含值是-n 50000，它可以使对服务器的测试限制在一个固定的总时间以内。默认时，没有时间限制。
-p包含了需要POST的数据的文件。
-P对一个中转代理提供BASIC认证信任。用户名和密码由一个:隔开，并以base64编码形式发送。无论服务器是否需要(即, 是否发送了401认证需求代码)，此字符串都会被发送。
-T POST数据所使用的Content-type头信息。
-v设置显示信息的详细程度-4或更大值会显示头信息，3或更大值可以显示响应代码(404,200等),2或更大值可以显示警告和其他信息。
-V显示版本号并退出。
-w以HTML表的格式输出结果。默认时，它是白色背景的两列宽度的一张表。
-i执行HEAD请求，而不是GET。
-x设置<table>属性的字符串。
-X对请求使用代理服务器。
-y设置<tr>属性的字符串。
-z设置<td>属性的字符串。
-C对请求附加一个Cookie:行。其典型形式是name=value的一个参数对，此参数可以重复。
-H对请求附加额外的头信息。此参数的典型形式是一个有效的头信息行，其中包含了以冒号分隔的字段和值的对(如,"Accept-Encoding:zip/zop;8bit")。
-A对服务器提供BASIC认证信任。用户名和密码由一个:隔开，并以base64编码形式发送。无论服务器是否需要(即,是否发送了401认证需求代码)，此字符串都会被发送。
-h显示使用方法。
-d不显示"percentage served within XX [ms] table"的消息(为以前的版本提供支持)。
-e产生一个以逗号分隔的(CSV)文件，其中包含了处理每个相应百分比的请求所需要(从1%到100%)的相应百分比的(以ms为单位)时间。这种格式已经“二进制化”，比'gnuplot'格式更有用。
-g把所有测试结果写入一个'gnuplot'或者TSV(以Tab分隔的)文件。此文件可以方便地导入到Gnuplot,IDL,Mathematica,Igor甚至Excel中。其中的第一行为标题。
-i执行HEAD请求，而不是GET。
-k启用HTTP KeepAlive功能，即在一个HTTP会话中执行多个请求。默认时，不启用KeepAlive功能。
-q如果处理的请求数大于150，ab每处理大约10%或者100个请求时，会在stderr输出一个进度计数。此-q标记可以抑制这些信息。

如果只用到一个Cookie，那么只需键入命令：
ab －n 100 －C key＝value http://test.com/
如果需要多个Cookie，就直接设Header：
ab -n 100 -H “Cookie: Key1=Value1; Key2=Value2” http://test.com/

性能指标：在进行性能测试过程中有几个指标比较重要：

1、吞吐率（Requests per second）
服务器并发处理能力的量化描述，单位是reqs/s，指的是在某个并发用户数下单位时间内处理的请求数。某个并发用户数下单位时间内能处理的最大请求数，称之为最大吞吐率。
记住：吞吐率是基于并发用户数的。这句话代表了两个含义：
a、吞吐率和并发用户数相关    b、不同的并发用户数下，吞吐率一般是不同的
计算公式：总请求数/处理完成这些请求数所花费的时间，即Request per second=Complete requests/Time taken for tests必须要说明的是，这个数值表示当前机器的整体性能，值越大越好。

2、并发连接数（The number of concurrent connections）并发连接数指的是某个时刻服务器所接受的请求数目，简单的讲，就是一个会话。

3、并发用户数（Concurrency Level）要注意区分这个概念和并发连接数之间的区别，一个用户可能同时会产生多个会话，也即连接数。在HTTP/1.1下，IE7支持两个并发连接，IE8支持6个并发连接，FireFox3支持4个并发连接，所以相应的，我们的并发用户数就得除以这个基数。

4、用户平均请求等待时间（Time per request）计算公式：处理完成所有请求数所花费的时间/（总请求数/并发用户数），即：
        Time per request=Time taken for tests/（Complete requests/Concurrency Level）
    Concurrency Level: 100//并发请求数
	Time taken for tests: 50.872 seconds//整个测试持续的时间
	Complete requests: 1000//完成的请求数
	Failed requests: 0//失败的请求数

5、服务器平均请求等待时间（Time per request:across all concurrent requests）
计算公式：处理完成所有请求数所花费的时间/总请求数，即：Time taken for/testsComplete requests可以看到，它是吞吐率的倒数。同时，它也等于用户平均请求等待时间/并发用户数，即Time per request/Concurrency Level

6、其他
Total transferred: 13701482 bytes//整个场景中的网络传输量
HTML transferred: 13197000 bytes//整个场景中的HTML内容传输量
Transfer rate: 263.02 [Kbytes/sec] received//平均每秒网络上的流量，可以帮助排除是否存在网络流量过大导致响应时间延长的问题
