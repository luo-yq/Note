负载生成器 fhb


fhb -W 1000 -r 300/300/60 -c 25 http://localhost:8980/phpWeb/php-bin/index.php




DESCRIPTION

fhb provides a simple command-line interface for Faban's HTTP driver. It will automatically create and compile an HTTP driver based on its command-line arguments, execute the driver, and print out a summary of the benchmark results. 
fhb is designed for simple benchmarking situations where you want to test the throughput of a single GET or POST request emulating some number of clients. Scalablity of the clients is limited to a single JVM running on a single machine; for more sophisticated usage (including driving a larger load by running multiple agents in multiple JVMs on multiple clients), you must utilize the Faban harness directly. 
After execution, the fhb will print out six pieces of information:
ops/sec: The throughput of the server, measured in requests per second.
% errors: The number of errors (HTTP result 4xx or 5xx) as a percentage of the total requests
avg. time: The average time (in seconds) of each request.
max time: The time (in seconds) of the slowest request.
90th %: 90% of the requests were processed in less than this number of seconds.
content size: The average size of the pages downloaded.
In addition, the driver will complain if various benchmark conditions aren't met. These indicate that either the server or the client has become bottlenecked. Pay close attention to the client in this case, as if the client is the bottleneck, the metrics aren't a valid indication of the server performance (rather, they are an indication of the client performance). There are three possible errors:
Little's law failed verification: If some client requests aren't satisfied
Think time deviation is too high: If the time required by the driver to get a response and process it is greater than the time requested.
Missed target 90%: This is printed if the target 90% response time is not met.
The first two of these generally indicate that the client isn't able to keep up with the server.
Options

-J jvm_option
Pass a standard JVM option to the underlying Java Virtual Machine. You may have multiple of these in the command line to pass multiple JVM options.
-D output directory
Use the given directory to hold output. The default for this directory is $java.io.tmpdir/faban_cd. Note that this directory is removed unless the -s option is present.
-f file
Use the provided configuration file. Fields in the configuration file supercedes all command line options except -D (output location).
-r rampUp/steady/rampDown  基准测试热身期/测试周期/减速期  单位秒
Amount of time to run the benchmark. The benchmark will have an initial ramp up of rampUp seconds (default 300). It will then measure the responsed during the steady interval (default 300 seconds), and finally ramp down for rampDown seconds (default 120).
-W thinkTime  请求周期  单位毫秒
Amount of time (in milliseconds) each client should wait between requests. The think time includes the amount of time to process the request -- if the driver is unable to process the request within the given think time, it will print an error. The default value is 0.
-s
Save the output of the benchmark run (in the output directory). This allows you to examine the raw Faban output files for more detailed data about the benchmark run.
-S
Perform data substitution on the GET or POST request (see Examples)
-c numThreads  客户端线程数
The number of threads in the driver to run. Each thread represents a unique connection to the server -- that is, each thread is a client in a logical sense.
-t 90% threshold
Use the given value as the 90% threshold. The default is 1.0 seconds.
-p file 使用数据文件进行post请求
-b
Send the POST request as binary (application/octet-stream) data rather than form (application/x-www-form-urlencoded).
-V 显示fhb的版本号
-h 显示帮助信息
Properties

fhb.http.provider
Sets the http transport provider. Currently the two options are "sun" and "apache3." The apache3 provider uses the Apache HttpClient 3.1 stack as the underlying transport whereas the Sun provider uses the java.net.HttpURLConnection and java.net.HttpsURLConnection from JavaSE.  To set the property, just use the command line option -J -Dfhb.http.provider=provider. The default is apache3.
faban.ssl.autotiming
Attaches the socket auto-timer above or below the ssl stack. The two options are "above" and "below." The ssl auto-timing is only applicable to the apache3 transport provider which uses the Apache HttpClient 3.1 stack as the underlying transport. To set the property, just use the command line option -J -Dfaban.ssl.autotiming=[above|below]. The default is attaching the auto-timer above the ssl stack. Attaching it below excludes the client-side cryptographic processing from the reported times.
EXAMPLES

发起一个1000个线程的简单get请求:
fhb -J -server -J -Xmx3500m -J -Xms3500m -c 1000 http://localhost:8000/logo.gif
使用数据文件data发起一个10个线程的post请求到EchoServlet:
fhb -J -server -J -Xmx3500m -J -Xms3500m com.sun.faban.driver.CommonDriver -c 1000 -p data http://localhost:8000/Echo/EchoServlet
数据文件data的内容:action=1&option=2
Data Substitutions

Like the Faban HTTP driver it uses, fhb allows for some random data to be inserted into GET or POST requests. To enable this, make sure to include the -S option in your command line. The available random data generators are:
faban.getRandomString(low, high): Generate a string of random characters between low and high characters in length
faban.getRandomInt(low, high): Generate a random integer between low and high inclusive.
To perform these substitions, the desired string is embedded in the GET query string or POST data between the @@ characters. For example, to request a random action in a GET request, you could specify this URL:
http://host:port/MyServlet/TestServlet?action=@@faban.getRandomInt(1, 100)@@
Or in case of a post request with substitutions, your post file may have the following content:
action=@@faban.getRandomInt(1, 100)@@&option=@@faban.getRandomInt(1, 20)@@

Configuration File

The configuration file allows specifying more elaborate benchmarks, albeit not as elaborate as writing a full-fledged Faban driver. The steps for specifying the configuration file are explaining at this location: http://faban.sunsource.net/docs/guide/driver/http.html






SYNOPSIS

 fabancli [-M masterURL] [-U user [-P password]] fabancli_command [command-options-and-arguments]
fabancli_command
Sub-commands of fabancli.
DESCRIPTION

fabancli provides a command-line interface for accessing the Faban harness functionality. At allows scripts and programs to interface with the Faban harness directly without going through the web interface. The fabancli can be run from both the local system where the Faban master is running, or from any remote machine.
Options

-M masterURL
Sends the command to a remote master instead of a local one. By default, fabancli will send the command to http://localhost:9980/
-U user
Uses the given user to access the Faban master. Since this username is often put into scripts, this is not a regular user but a special user provided in the Faban harness configuration file - faban/config/harness.xml.
-P password
Provides the password to the user name given in the -U option. This password is also as configured in the harness configuration file.
Commands


kill runId 杀进程
pending 运行的进程和队列
showlogs runId [-f] [-t] 进程日志
-f 	Keeps following and updating the log display until the run is done.
-t 	Starts only with the 10 most recent log entries. Combined with the -f option, this will start with the 10 most recent log entries and keep updating the logs till the end of the run. This behaves like the tail -f Unix command.
status runId 显示进程状态
Run status can be:
QUEUED RECEIVED STARTED COMPLETED FAILED KILLED
QUEUED 	The run is submitted to the run queue, but not yet started.
RECEIVED 	For submission proxies only, the run has been received by the running rig and may have been started.
STARTED	The run has been started. It is running at this time.
COMPLETED	The run has been finished and results are available.
FAILED	The run failed to complete due exceptions.
KILLED	The run was killed by a user.
submit benchmark profile configfile
Submits a run for a given benchmark, identified by it's short name. The benchmark must already be deployed on the master. The given configuration will be saved in the profile identified
wait runId
Blocks waiting for the given runId to terminate. The wait command will return immediately if the run is already finished.
EXAMPLES

Submit a run for the Web101 benchmark on the local master with the run config file /tmp/run.xml. This command will save the configuration in the profile test:
fabancli submit web101 test /tmp/run.xml
web101.1A
The submit command will print the run id of the submitted to stdout, such as web101.1A.

Check the status of the submitted run:
fabancli status web101.1A
STARTED

View and follow the logs for the run:
fabancli showlogs web101.1A -ft
