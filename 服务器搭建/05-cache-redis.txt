 

启动过程有报错和警告，按照提示进行处理
vi /etc/sysctl.conf 
sysctl vm.overcommit_memory=1

echo '' >> /etc/rc.locl
echo 1000 >/proc/sys/net/core/somaxconn

 
注意点：
ctrl+z 会把服务挂起来，导致客户端无法访问，应将服务启动方式改为后台启动
redis.conf文件将daemonize改成yes

redis-server & 启动



开机启动配置


1. 根据启动脚本要求，将修改好的配置文件以端口为名复制一份到指定目录。需使用root用户。
mkdir /etc/redis
cp redis.conf /etc/redis/6379.conf
2. 将启动脚本复制到/etc/init.d目录下，本例将启动脚本命名为redisd（通常都以d结尾表示是后台自启动服务）。
cp redis_init_script /etc/init.d/redisd
3.  设置为开机自启动
此处直接配置开启自启动 chkconfig redisd on 将报错误： service redisd does not support chkconfig
参照 此篇文章 ，在启动脚本开头添加如下两行注释以修改其运行级别：
#!/bin/sh
# chkconfig:   2345 90 10
# description:  Redis is a persistent key-value database
#
再设置即可成功。
#设置为开机自启动服务器
chkconfig redisd on
#打开服务
service redisd start
#关闭服务
service redisd stop





Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。

string是redis最基本的类型，是二进制安全的。意思是redis的string可以包含任何数据。一个键最大能存储512MB。
Redis hash 是一个键值对集合。hash特别适合用于存储对象。每个 hash 可以存储 pow(2,32) - 1 键值对（40多亿）。
Redis List列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。列表最多可存储(4294967295, 每个列表可存储40多亿)。
Redis的Set是string类型的无序集合。集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。集合中最大的成员数为 (4294967295, 每个集合可存储40多亿个成员)。
Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。通过分数从小到大排序,但分数(score)却可以重复。


从时间复杂度的角度看，Redis 列表主要的特性是支持以常量时间在列表的头和尾附近插入和删除元素，即使列表中已经插入了上百万的数据。访问列表两端的元素非常的快速，但是访问一个非常大的列表的中间却非常的慢，因为这是一个 O(N)时间复杂度的操作。


数据库查询缓存方案
sql---->md5---->redis缓存主键

配置文件
requirepass  authword  #密码验证
daemonize no #是否已守护进程启动，默认为no

#若master配置了密码则slave也要配置相应的密码参数否则无法进行正常复制的。
masterauth  slave连接master的密码

安装
进入解压缩后的目录 cd redis-3.0.3
编译测试：sudo make test
编译安装：sudo make install

启动  redis-server
登录客户端  redis -h host -p port 
查看配置 config get *
查看密码 config get requirepass
设置密码 config set requirepass authword
密码登录 redis -h host -p port -a authword
		或链接后使用auth命令验证  auth authword




yum -y install gcc

cd /usr/local
wget http://download.redis.io/releases/redis-3.2.8.tar.gz
tar xzf redis-3.2.8.tar.gz
rm -f redis-3.2.8.tar.gz
cd redis-3.2.8
#make  默认采用jemalloc 会报错
make MALLOC=libc


cp /usr/local/redis-3.2.8/src/redis-server /usr/sbin
cp /usr/local/redis-3.2.8/src/redis-benchmark /usr/sbin
cp /usr/local/redis-3.2.8/src/redis-cli /usr/sbin

#启动默认端口6379
redis-server &


#开放端口
firewall-cmd --zone=public --add-port=6379/tcp --permanent
firewall-cmd --reload

#远程访问
#redis-cli -h 192.168.0.190 -p 6379 







