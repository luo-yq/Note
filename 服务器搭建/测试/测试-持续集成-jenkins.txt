持续集成工具 hudson 的衍生 jenkins.war
在tomcat以端口号8180启动
打开http://localhost:8180/jenkins


启动项目
  java -jar jenkins.war --httpPort -8080
项目首页  http://localhost:8080/

新建  普通项目、maven项目

配置： 构建方式










2. 创建任务
  2.1 点“新Job”,界面如下：
  输入任务名称，任意名称都可以，但最好是有意义的名称，这里输入的名称和项目名称相同为hummer
  2.2 选择项目类型，因我的项目是maven项目，这里选择“构建一个maven2/3项目”点击”OK“进入下一个界面。
  2.3 界面如下：
  源代码管理根据自己的需要进行选择，我的源代码是使用svn管理的，这里选择“Subversion Modules”，在"Repository URL"录入你的svn仓库地址；第一次录入时还需要录入svn仓库的用户名和口令。
刚才的那个界面比较大，向下滚动，中间部分的界面如下：
构建触发器，我选择“Build whenever a SNAPSHOT dependency is built”，意思是依赖于快照的构建，应该是当svn有修改时就构建项目。
2.4 build设置不用修改，就使用pom.xml，目标选项也不用修改。
2.5 设置构建后的步骤，（Post Steps，可选设置 ），我这里要求构建成功后把war文件复制到指定的目录，然后停运tomcat，删除项目web目录，启动tomcat。
2.6 设置邮件通知 
勾选“E-mail Notification”，在recipients中录入要接收邮件的邮箱。
点“保存”，完成设置
3. 在工作区域的左边菜单上点“立即构建”，开始构建项目，








Docker+Jenkins持续集成环境（1）使用Docker搭建Jenkins+Docker持续集成环境
本文介绍如何通过Jenkins的docker镜像从零开始构建一个基于docker镜像的持续集成环境，包含自动化构建、发布到仓库\并部署上线。

0. 前置条件
服务器安装docker，并启动docker swarm

注意docker启动时，需要开启tcp端口

1.Jenkins 安装
1.1 命令行启动：
安装比较简单，直接运行

docker run -p 8080:8080 -p 50000:50000 -d  -v /home/jenkins-home-docker:/var/jenkins_home  jenkins/jenkins:lts
运行后查看日志，获取token，打开ip:8080，输入token，安装常用插件

1.2 使用swarm集群管理工具
在services里，添加服务

enter description here

2.Jenkins 插件安装
我们需要一些插件支持

Docker plugin ： 提供docker 构建和发布
SSH plugin ： 提供通过SSH在远程主机执行命令，用于部署服务
maven plugin： 支持maven
系统管理-插件管理里进行安装即可。

2.1 docker 配置
“系统管理-系统设置-云” 里新增
enter description here

注意docker host url需要加上tcp://

2.2 ssh主机 配置
“系统管理-系统设置-SSH remote hosts” 里配置SSH远程主机

enter description here

2.3 配置下email
在系统设置里直接设置，配置下smtp

2.4 配置jdk、maven
在系统管理-全局工具配置里设置JDK自动安装

enter description here

maven同样配置即可

3.Jenkins 项目配置
3.1 新建项目
我们是maven项目，选择maven

enter description here

3.2 配置源码管理
首先配置源码，可以是git或者svn，项目组用的是svn

enter description here

3.3 配置触发器
配置自动构建，勾选POLL SCM，配置5分钟检查一次，当svn发生变化时，会自动启动构建

enter description here

3.4 配置Build
简单的maven项目，构建使用pom.xml，执行package -DskipTests

enter description here

3.5 配置Post Steps
Post Steps是指构建完成执行的步骤，我们会实现构建docker，发布docker和部署服务

3.5.1 配置docker
点击add post-build step，选择Build/publish docker image:

enter description here

选择cloud为先前配置的docker-cloud，image填写私服发布地址，勾上push image。

enter description here

这样配置，构建完成后会自动push到私服。

3.5.2 配置远程部署
我们使用docker stack来部署服务

首先，编写docker-compose.yml

version: "3"
services:
   backend:
    image: 192.168.86.8:5000/allinone-service-cicd
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    ports:
      - "8007:8006"
    networks:
      - webnet
networks:
  webnet:
保存到docker服务器，比如/root/allinone/allinone-service/allinone目录

然后，添加post-build step：

enter description here

选择配置好的远程docker主机：

enter description here

填入命令：

cd /root/allinone/allinone-service/allinone
docker stack down allinone-cicd
docker stack deploy -c docker-compose.yml allinone-cicd
docker stack down 将原先服务下线
docker stack deploy -c 重新部署服务
4 开始构建
4.1 手动构建
回到工程，点击立即构建，第一次构建会自动下载jdk，maven，会比较慢

enter description here

等待一会，构建成功：

9e70992ebc17: Pushing [===============================================>   ]  42.66MB/45.02MB
9e70992ebc17: Pushing [=================================================> ]  44.96MB/45.02MB
9e70992ebc17: Pushing [==================================================>]  45.02MB
9e70992ebc17: Pushed
latest: digest: sha256:5df6c97d6173527bc92ddc436fcef063069cd1cd3d0da8a0c74d2238443ae4d6 size: 1582
Docker Build Done
[SSH] script:

cd /root/allinone/allinone-service/allinone
docker stack down allinone-cicd
docker stack deploy -c docker-compose.yml allinone-cicd

[SSH] executing...
Removing service allinone-cicd_backend
Removing network allinone-cicd_webnet
Creating network allinone-cicd_webnet
Creating service allinone-cicd_backend

[SSH] completed
[SSH] exit-status: 0

Finished: SUCCESS
如果配置了邮件通知，会收到构建成功邮件。

4.2 自动构建
SVN提交一个变更，等几分钟，查看Subversion Polling Log,已经有记录了，发现已经自动构建了一个版本

