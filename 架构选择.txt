1） 前端负载均衡： 有钱的用硬件四层交换（想当年雅虎中国2000台服务器，只用了四台Alteon就搞定了），没钱的用软件负载均衡（LVS、Nginx）
2） 多级缓存：首先要充分利用浏览器的缓存能力，也就是Cookie，然后要在服务端利用页面缓存机制，前些年大家喜欢用Squid，现在Varnish更流行起来了，有一个牛逼的故事是挪威的最大的在线报纸 Verdens Gang(vg.no)使用 3 台 Varnish 代替了原来的 12 台 Squid，性能比以前更好，这是 Varnish 最成功的应用案例。 最后一个缓存点是在数据库前方设置，让那些经常需要被查询，但是实时性要求不那么高的数据缓存起来，避免对数据库的频繁查询。三级缓存可以有效的提升整个系统的性能。
3）应用服务器层面：先考虑一下你的静态页面与动态页面的占比，然后考虑一下如何尽量实现动态页面静态化，把静态的部署到Apache上，动态的部署到Tomcat上吧。如果你是一个像Flicker那样的图片共享网站，必须考虑设置单独的图片服务器，这是淘宝血泪史告诉我们的真理。
4）现在要考虑数据库的选型问题了：采用关系型数据库还是非关系型数据库完全取决于你的业务场景，如果你要实现实时要求高，数据一致性要求高的场景，关系型数据库；如果你要实现海量数据的查询和高并发，非关系型数据库（考虑Facebook一张表有一亿用户，如果用关系型数据库查询。磁盘IO也快撑不住了，而非关系型数据库则完全没有这个问题）；
5）数据库性能问题之外务必考虑清楚数据库的并发性能：通常会采用生产数据库与查询数据库分离的方式，也就是著名的MySQL的单主多从服务方式。为了实现高可用性HA，有的网站比如淘宝网，在Master之间也会实现集群部署。
6）数据库集群和库表散列: 上面提到的数据库集群由于在架构,成本,扩张性方面都会受到所采用DB类型的限制,于是我们需要从应用程序的角度来考虑改善系统架构,库表散列是常用并且最有效的解决方案，在应用程序中将数据库进行分离,不同的模块对应不同的数据库或者表,再按照一定的策略对某个页面或者功能进行更小的数据库散列,比如用户表,按照用户 ID 进行表散列,这样就能够低成本的提升系统的性能并.且有很好的扩展性，sohu 的论坛就是采用了这样的架构.




Flume：Flume 是管道流方式，提供了很多的默认实现，让用户通过参数部署，及扩展API.

Kafka：Kafka是一个可持久化的分布式的消息队列。

Kafka 是一个非常通用的系统。你可以有许多生产者和很多的消费者共享多个主题Topics。相比之下,Flume是一个专用工具被设计为旨在往HDFS,HBase发送数据。它对HDFS有特殊的优化，并且集成了Hadoop的安全特性。所以，Cloudera 建议如果数据被多个系统消费的话，使用kafka；如果数据被设计给Hadoop使用，使用Flume。

正如你们所知Flume内置很多的source和sink组件。然而，Kafka明显有一个更小的生产消费者生态系统，并且Kafka的社区支持不好。希望将来这种情况会得到改善，但是目前：使用Kafka意味着你准备好了编写你自己的生产者和消费者代码。如果已经存在的Flume Sources和Sinks满足你的需求，并且你更喜欢不需要任何开发的系统，请使用Flume。

Flume可以使用拦截器实时处理数据。这些对数据屏蔽或者过量是很有用的。Kafka需要外部的流处理系统才能做到。

Kafka和Flume都是可靠的系统,通过适当的配置能保证零数据丢失。然而，Flume不支持副本事件。于是，如果Flume代理的一个节点奔溃了，即使使用了可靠的文件管道方式，你也将丢失这些事件直到你恢复这些磁盘。如果你需要一个高可靠行的管道，那么使用Kafka是个更好的选择。

Flume和Kafka可以很好地结合起来使用。如果你的设计需要从Kafka到Hadoop的流数据，使用Flume代理并配置Kafka的Source读取数据也是可行的：你没有必要实现自己的消费者。你可以直接利用Flume与HDFS及HBase的结合的所有好处。你可以使用Cloudera Manager对消费者的监控，并且你甚至可以添加拦截器进行一些流处理。

Flume和Kafka可以结合起来使用。通常会使用Flume + Kafka的方式。其实如果为了利用Flume已有的写HDFS功能，也可以使用Kafka + Flume的方式。