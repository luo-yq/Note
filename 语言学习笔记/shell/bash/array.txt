

数组替换 ${A[@]} 或 ${A[*]}得到：a b c def, 即数组的全部元素。
访问数组的成员 ${A[0]} 其中，${A[0]}可得到a, 即数组A的第一个元素， 而 ${A[1]}则为数组A的第二元素，依次类推。
数组的 length  ${#A[@]} 或 ${#A[*]} 数组的所有元素的个数。
${#A[0]}  其中，${#A[0]}可以得到：1，即数组A的第一个元素(a)的长度； 同理，${#A[3]}可以得到: 3, 即数组A的第4个元素(def)的长度。
数组元素的重新赋值 A[3]=xyz 将数组A的第四个元素重新定义为 xyz。



#定义数组 数组名=(值1 值2 ... 值n) 分隔符为空格或换行
array_name=(value0 value1 value2 value3)
array_name[n]=valuen
#读取数组 ${数组名[下标]}
valuen=${array_name[n]}
#使用@符号可以获取数组中的所有元素，例如：
echo ${array_name[@]}
#获取数组长度的方法与获取字符串长度的方法相同，例如： 
# 取得数组元素的个数
length=${#array_name[@]}
# 或者
length=${#array_name[*]}
# 取得数组单个元素的长度
lengthn=${#array_name[n]}


在这里只讨论一维数组的情况，关于多维数组(事实上，你得用一维数组的方法来模拟)，不涉及。这里包括数组的复制，计算，删除，替换。
数组的声明:
array[key]=value # array[0]=one,array[1]=two
declare -a array # array被当作数组名
array=( value1 value2 value3 ... )
array=( [1]=one [2]=two [3]=three ... )
array="one two three" # echo ${array[0|@|*]},把array变量当作数组来处理，但数组元素只有字符串本身

数组的访问:${array[key]} # ${array[1]}

数组的删除:
unset array[1] 
unset array 

计算数组的长度:
${#array}
${#array[0]} #同上。 ${#array[*]} 、${#array[@]}。注意同#{array:0}的区别
数组的提取
从尾部开始提取:

array=( [0]=one [1]=two [2]=three [3]=four )
${array[@]:1} # two three four,除掉第一个元素后所有元素，那么${array[@]:0}表示所有元素
${array[@]:0:2} # one two
${array[@]:1:2} # two three


# echo ${array[@]#t*e} # 左边开始最短的匹配:"t*e",这将匹配到"thre"
one two e four
# echo ${array[@]##t*e} # 左边开始最长的匹配,这将匹配到"three"
# array=( [0]=one [1]=two [2]=three [3]=four )
# echo ${array[@] %o} # 从字符串的结尾开始最短的匹配
one tw three four
# echo ${array[@] %%o} # 从字符串的结尾开始最长的匹配
one tw three four
子串替换

# array=( [0]=one [1]=two [2]=three [3]=four )
第一个匹配到的，会被删除

# echo ${array[@] /o/m}
mne twm three fmur
所有匹配到的，都会被删除

# echo ${array[@] //o/m}
mne twm three fmur
没有指定替换子串，则删除匹配到的子符

# echo ${array[@] //o/}
ne tw three fur
替换字符串前端子串

# echo ${array[@] /#o/k}
kne two three four
替换字符串后端子串

# echo ${array[@] /%o/k}
one twk three four
