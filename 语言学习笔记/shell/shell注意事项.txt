考虑到 Shell 脚本的命令限制和效率问题，下列情况一般不使用 Shell：

资源密集型的任务，尤其在需要考虑效率时（比如，排序，hash 等等）。
需要处理大任务的数学操作，尤其是浮点运算，精确运算，或者复杂的算术运算（这种情况一般使用 C++ 或 FORTRAN 来处理）。
有跨平台（操作系统）移植需求（一般使用 C 或 Java）。
复杂的应用，在必须使用结构化编程的时候（需要变量的类型检查，函数原型，等等）。
对于影响系统全局性的关键任务应用。
对于安全有很高要求的任务，比如你需要一个健壮的系统来防止入侵、破解、恶意破坏等等。
项目由连串的依赖的各个部分组成。
需要大规模的文件操作。
需要多维数组的支持。
需要数据结构的支持，比如链表或数等数据结构。
需要产生或操作图形化界面 GUI。
需要直接操作系统硬件。
需要 I/O 或 socket 接口。
需要使用库或者遗留下来的老代码的接口。
私人的、闭源的应用（shell 脚本把代码就放在文本文件中，全世界都能看到）。






以下是几个初级的陷阱：

对 #! 这一行的长度尽量不要超过 64 个字符
脚本的可移植性取决于是否有完整的路径名称
不要在选项之后放置任何空白，因为空白也会跟着选项一起传递给被引用的程序
需要知道解释器的完成路径的名称。 这样可以规避可移植性的问题， 厂商不同，同样的东西可能放在不同的地方
一些较久的系统，内核不具备 #! 的能力，有些 shell 会自行处理，这些 shell 对于 #! 与紧随其后的解释器名称之间是否可以有空白，可能有不同的解释





































