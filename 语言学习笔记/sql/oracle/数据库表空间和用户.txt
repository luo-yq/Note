
study
建库


Oracle数据库实例的创建、删除、修改
    本文中的数据库实例这一称谓应该换做数据库更为准确，数据库可以理解为是一个物理的静态概念，主要包括一些物
理存在的数据库文件，而数据库实例则是一个动态概念，包括一些内存区域以及若干进程，数据库实例是对数据库进行操
作的执行者。（20090714修改）
    安装完Oracle数据库系统的安装后，需要创建数据库实例才能真正开始使用Oracle数据库服务。  
    总结起来，Oracle有三种创建数据库实例的方法。
    第一种，最常用也最简单，那就是通过DBCA(Database Configuration Assistant)，这是Oralce提供的一个图形界面
的数据库实例配置工具，通过它可以创建、删除和修改数据库实例，它的使用也比较简单、易懂，交互式的图形界面操作
，非常准确有效的提示与配置，是一个比较方便的创建数据库实例的方式。
    按照DBCA给出的提示，很容易创建一个新数据库实例。
    在创建数据库的时候，DBCA还提供了两个选项，让你可以根据刚刚设置好的参数生成一个数据库实例模板和一份数据
库实例创建脚本。这两个东西是非常好，非常有用的东西，数据库模板由Oracle自己管理维护，已经创建好的数据库实例
模板可以在DBCA图形程序新建数据库实例时作为模板来使用，另外在 DBCA使用responseFile文件或者命令行参数创建数
据库时也需要用到（见后面介绍）；数据库创建脚本是一组脚本，包括shell脚本和sql 脚本，这些脚本共同实现一个功
能，那就是按照你之前在DBCA中设置好的那样创建一个数据库实例（后面也会有介绍），你需要做的只是将这些脚本在你
的代码中调用起来。当然，你也可以选择只生成数据库模板或者数据库脚本，而不用去创建一个真的数据库（这通常很费
时间）。
    DBCA是一个非常强大的工具，上面看到的只是DBCA最常用的创建一个数据库实例的使用，其实DBCA还提供另外两种使
用方法，分别是 responseFile和命令行带参调用。
    先说DBCA的responseFile使用方法，responseFile这个东东并不陌生，前文讲的Oracle自动安装就是使用
responseFile完成的，DBCA的responseFile使用方法和Oracle安装程序的responseFile使用方法基本一致。但 DBCA的
responseFile的来源只能是Oracle安装包中提供的模板文件，而不能向Oracle安装程序的responseFile一样，先自己
record一个，然后再用这个record去指导Oracle的自动安装。从Oracle安装包中获取到DBCA的responseFile模板文件后，
你可以根据自己的需要编辑修改该模板文件，以完成对数据库实例的某些参数设置（DBCA图形界面所提供的参数设置，
responseFile中都可以设置，而且该responseFile模板文件的注释写的很好，你完全不用担心无法搞定那些繁杂的数据库
实例参数设置，赞Oralce一个！）。该模板文件在Oracle安装包中的位置一般在${ORACLE_PACKAGE}/response目录下。
    有了responseFile之后，你只需在调用DBCA的时候指定responseFile的位置和另外一些参数：
    dbca [-silent|-progressOnly] -responseFile responseFile名称
    其中-silent|-progressOnly选项意义和Oracle安装程序命令行参数中的同名选项一样，表示完全字符界面自动安装
或者带图形提示界面的半自动化安装。
    responseFile名称当然就是responseFile的具体位置了。
    但是，有一点不是很好，那就是使用DBCA的responseFile方式创建Oracle数据库实例，需要事先已经存在一个数据库
实例模板了，在 responseFile中再指定该数据库实例模板名，然后DBCA再依据这个已有的数据库实例模板完成新数据库
实例的创建，所以就会有前面讲到的 DBCA图形界面创建数据库实例时提供生成数据库实例模板的选项（数据库实例模板
也可以从一个已有数据库实例生成），就是在这要用到的。
    从上面调用DBCA使用responseFile的命令中，应该已经看到了DBCA是提供一些命令行参数选项的，其实DBCA提供的命
令行参数选项远比你想象的强大，甚至可以这么说，所有DBCA图形界面和responseFile能够办到的事，通过DBCA丰富的命
令行参数选项都可以办到。你在DBCA 图形界面上设置的参数或者在responseFile中指定的参数值都可以通过DBCA的命令
行参数选项来进行设置，所以你完全可以只通过DBCA的命令行带参调用来完成一个数据库实例的创建（当然也包括删除、
修改数据库实例等所有DBCA图形界面所能提供的功能）。其实，我更愿意这样认为，DBCA的 responseFile应用也是一种
DBCA命令行带参调用的使用。需要注意的是，当DBCA的命令行参数和responseFile同时设置一个参数时，命令行参数的优
先级是比responseFile要高的。另外，使用DBCA命令行带参调用新建数据库实例和使用responseFile新建数据库实例一样
，也是需要事先已经存在一个数据库实例模板，才能完成新数据库实例的创建。一份非常详细的DBCA所有命令行参数选项
列表，你可以通过执行 dbca -help获得。
    到现在你可能已经发现，DBCA图形界面、DBCA的responseFile使用以及DBCA的命令行带参调用，其实是三个分别具备
完全数据库实例设置功能的工具或者接口，分别对应不同的应用场景，它们可以满足你几乎所有的应用需求（使用这样的
工具来帮助构建自己的软件真是非常惬意的一件事情，再赞 Oracle一个！）。
    第二种是通过脚本（是否称为命令行方式更合适，下文描述的脚本方式其实都是命令行方式的非交互式方法，或者说
命令行的自动化方式，但其实所有脚本方式都可以将shell脚本或sql脚本中的shell命令、sqlplus命令拆分出来，手工在
shell中或者sqlplus界面中进行交互式的输入执行，这可以称为命令行的手工方式）来完成数据库实例的代码中自动创建
。这里说的脚本包括shell脚本和sql脚本，这种方式可以说是最适合与编程结合的，因为这些shell脚本或者sql脚本都可
以直接在shell命令中调用执行，所以可以很好与shell编程相结合。而这其实是基于一个非常重要的事实，即 Oracle提
供了一个交互式的命令行工具sqlplus（类似与DB2的db2cmd），这个工具可以认为是一个Oracle数据库管理工具，通过它
可以执行一些Oracle的数据库管理命令，来完成一些数据库管理工作（这当然就包括数据库实例的创建），同时你也可以
把它当作一个SQL语句执行器，直接在里边执行你想要执行的SQL语句或者存储过程等，并获取执行结果。并且，更重要的
是，sqlplus可以直接在shell命令行中进行非交互式的调用执行（通常是调用执行一段sqlplus语句，或者是一个由一些
sqlplus语句组成的sql脚本，我所说的sqlplus语句包括Oracle数据库管理维护命令、SQL语句和存储过程等），这就为在
shell编程中使用sqlplus完成数据库实例自动创建工作提供了可能。
    shell命令行中非交互式调用sqlplus执行一段sqlplus语句是利用shell编程中重定向命令的一个特性，即分隔符重定
向输入。一般用法如下：
    command<<任意自定义分隔符
    >（换行）内容
    >（换行）内容
    >自定义分隔符
    shell中遇到<<则会自动将下一个单词认作分隔符，并将分隔符后面的文本当作command命令执行的内容传递给
command依次全部执行直至遇到下一个分隔符单词才结束。这里的分隔符可以是任意自定义的单词，通常使用EOF，举例：
    sqlplus / as sysdba<<EOF
    startup nomount;
    select * from v$version;
    shutdown immediate;
    exit;
    EOF
    这段shell程序调用sqlplus执行了若干sqlplus语句，用来启动数据库实例，查询数据库版本信息，然后关闭数据库
实例，退出 sqlplus。
    shell命令行中非交互式调用sqlplus执行一个sql脚本是利用sqlplus本身提供的命令行参数。在sqlplus界面中可以
通过start 命令和@命令来执行一个sql脚本，两者功效相同，用法如下：
    SQL>start sql脚本绝对路径；
    SQL>@sql脚本绝对路径；
    而在shell命令行中可以使用@来完成sqlplus对sql脚本的调用执行，举例：
    sqlplus / as sysdba @./MySQL.sql
    以上命令会调用sqlplus执行当前目录下的MySQL.sql脚本。
    使用脚本来完成数据库实例的创建工作，也分为两种情况。
    一种是诚如前文所述的那样，在使用DBCA图形工具创建数据库实例的同时生成一份数据库实例创建脚本（包括若干
shell脚本和sql脚本），那么你就可以使用这份脚本，在shell中进行调用，完成数据库实例的代码自动创建。使用这份
数据库实例创建脚本创建的新数据库实例和原数据库实例是完全一样，当然，你可以将生成的脚本进行修改，以完成你对
数据库实例的某些设置，但是请在你对脚本内容已经足够了解，并且知道你自己在干什么的情况下修改脚本，否则你很有
可能使用修改后的脚本无法正确创建数据库实例。这种方法中shell脚本对sqlplus的使用，更多的是使用sqlplus来执行
一些Oracle 生成的sql脚本（这些sql脚本的内容是就是一些sqlplus语句的集合，它们的任务就是完成数据库实例的创建
以及设置）。
    另一种情况则是不依靠DBCA生成的脚本，完全由自己来编写实现一份shell脚本，在脚本中你可以调用sqlplus执行一
段sqlplus语句或者其它一些sql脚本，以完成数据库实例的创建和设置，这完全取决于你的实现；而最常用的用来创建数
据库实例的一个方法就是在sqlplus中使用 create database语句，create database语句提供了许多丰富的选项和参数设
置，确保你能完全创建一个自己所需要的数据库实例。当然，还有一些其它方法可以创建数据库实例，比如调用执行
oracle提供某些存储过程等。
    至于create database语句的详细介绍可以参考oracle的sql reference。
    第三种严格来说不能算作一种创建Oracle数据库实例的方法，它是通过已有的数据库实例为基础来完成新数据库实例
的创建的。这种方法是首先通过第一种或者第二种方法来创建好一个数据库实例，然后将该数据库实例的物理文件进行备
份，然后直接使用备份的物理文件恢复出一个与原数据库实例完全一样新的数据库实例，所以这种方法需要和第一、二种
方法相配合才能使用。这种方法其实已经属于Oracle数据备份与恢复的范畴了，就是Oracle数据备份恢复方式中的物理备
份恢复，所以这种方法可以叫做物理恢复法。
   简单介绍物理恢复法，首先将一个已经存在数据库实例（最好已关闭）进行物理备份，所谓物理备份其实就是复制该
数据库实例所使用的操作系统文件，这些文件主要包括DataFiles、RedoLogs、ControlFiles和UndoFiles（这些文件一般
存在于$ORACLE_HOME/oradata目录下），进行数据库实例恢复的时候只需将备份的操作系统文件复制到新的oradata目录
下即可，可以直接启动使用恢复后的该数据库实例。不难看出，这种备份恢复是依赖于操作系统平台的。
    详细的物理备份和恢复介绍可以参考oracle的backup and recovery basics以及backup and recovery advanced
user's guide。
    说完了数据库实例的创建，现在来说说数据库实例的删除和修改。其实介绍完了数据库实例的创建，数据库实例的删
除和修改就非常简单了。基本和前文数据库实例创建的内容相一致，且比较而言更简单。
    数据库实例的删除从上文中数据库实例的创建不难得到，大致有两种方法，DBCA工具和命令行方式。
    DBCA工具除了能够用来创建数据库实例，当然也能够用来删除数据库实例了，且同样可以用使用responseFile或者命
令行带参调用等方法来完成数据库实例的删除，请参考数据库实例创建部分。
    命令行删除数据库实例的方式，严格来讲，是使用一组sqlplus命令来完成数据库实例的删除，这组sqlplus命令可以
组织在一个sql脚本中，然后在shell命令行中调用sqlplus程序来执行该sql脚本，或者直接在shell命令行中利用shell程
序重定向特性调用sqlplus依次完全执行这组sqlplus命令，再或者使用手工的交互式输入执行，使用方法请参考数据库实
例创建部分。
    其中涉及到的sqlplus命令参考以下：
    SQL>startup restrict mount;
    SQL>drop database;
    使用sqlplus命令删除数据库实例，必须先以restrict mount方式将数据库实例加载（但不打开），然后使用drop
database语句删除该数据库实例。
    数据库实例的修改和数据库实例的创建，情况类似，DBCA方式或者命令行方式。只要是DBCA方式能够修改的数据库实
例参数，命令行方式也都能办到。
标签： Oracle 数据库 实例

场景：用户是用赛门铁克备份工具做的oracle备份。他发给我的备份文件都是dbf。
[root@kk mcerp]# ls
RMAN_TS.dbf   testouhs.dbf   zbb01.dbf
sysaux01.dbf  undotbs01.dbf
system01.dbf  users01.dbf
于是我在本地建立了一个数据库并且目录结构和生产库的一致。
Tips：生产系统：RedHat 5 64-bit  + oracle 10.2.0.1.0
  本地系统：RedHat 5 32-bit   + oracle 10.2.0.1.0
下面开始恢复：
1，利用spfile.ora(从生产库上搞下来的)启动数据库到nomount状态
[root@kk oracle]# cat pfile.ora
mcerp.__db_cache_size=3238002688
mcerp.__java_pool_size=33554432
mcerp.__large_pool_size=16777216
mcerp.__shared_pool_size=1677721600
mcerp.__streams_pool_size=33554432
*.audit_file_dest='/opt/oracle/admin/mcerp/adump'
*.background_dump_dest='/opt/oracle/admin/mcerp/bdump'
*.compatible='10.2.0.1.0'
*.control_files='/opt/oracle/oradata/mcerp/control01.ctl','/opt/oracle/oradata/mcerp/control02.ctl','/opt/
oracle/oradata/mcerp/control03.ctl'
*.core_dump_dest='/opt/oracle/admin/mcerp/cdump'
*.db_block_size=8192
*.db_domain=''
*.db_file_multiblock_read_count=16
*.db_name='mcerp'
*.db_recovery_file_dest='/opt/oracle/flash_recovery_area'
*.db_recovery_file_dest_size=21474836480
*.dispatchers='(PROTOCOL=TCP) (SERVICE=mcerpXDB)'
*.job_queue_processes=10
*.open_cursors=300
*.pga_aggregate_target=1671430144
*.processes=500
*.remote_login_passwordfile='EXCLUSIVE'
*.sessions=500
*.sga_target=1015339008
*.undo_management='AUTO'
*.undo_tablespace='UNDOTBS1'
*.user_dump_dest='/opt/oracle/admin/mcerp/udump'
2，创建控制文件（从生产库上backup controlfile to trace）
CREATE CONTROLFILE REUSE DATABASE "MCERP" RESETLOGS  ARCHIVELOG
    MAXLOGFILES 16
    MAXLOGMEMBERS 3
    MAXDATAFILES 100
    MAXINSTANCES 8
    MAXLOGHISTORY 292
LOGFILE
  GROUP 1 '/opt/oracle/oradata/mcerp/redo01.log'  SIZE 50M,
  GROUP 2 '/opt/oracle/oradata/mcerp/redo02.log'  SIZE 50M,
  GROUP 3 '/opt/oracle/oradata/mcerp/redo03.log'  SIZE 50M
DATAFILE
  '/opt/oracle/oradata/mcerp/system01.dbf',
  '/opt/oracle/oradata/mcerp/undotbs01.dbf',
  '/opt/oracle/oradata/mcerp/sysaux01.dbf',
  '/opt/oracle/oradata/mcerp/users01.dbf',
  '/opt/oracle/oradata/mcerp/RMAN_TS.dbf',
  '/opt/oracle/oradata/mcerp/testouhs.dbf',
  '/opt/oracle/oradata/mcerp/zbb01.dbf'
CHARACTER SET ZHS16GBK;
3，在mount状态下执行下面的操作，发现数据库文件的scn号不一致
SQL> select file#,CHECKPOINT_CHANGE# from v$datafile;
     FILE# CHECKPOINT_CHANGE#
---------- ------------------
         1           70721887
         2           70824865
         3           70772352
         4           70824865
         5           70772352
         6           70824865
         7           70824865
connected to target database: MCERP (DBID=1423600306, not open)
于是我就在pfile中添加了一个隐藏参数
_allow_resetlogs_corruption=true
4，再启动数据库到mount状态下
SQL> startup mount pfile=/home/oracle/pfile.ora
SQL> alter database open resetlogs;
alter database open resetlogs
*
ERROR at line 1:
ORA-03113: end-of-file on communication channel
莫名其妙地就死掉了。。。警报日志里面记录如下
Sat Apr 10 17:42:53 2010
Errors in file /opt/oracle/admin/mcerp/udump/mcerp_ora_30331.trc:
ORA-00600: internal error code, arguments: [2662], [0], [70824871], [0], [70837214], [8388617], [], []
Sat Apr 10 17:42:54 2010
Errors in file /opt/oracle/admin/mcerp/udump/mcerp_ora_30331.trc:
ORA-00600: internal error code, arguments: [2662], [0], [70824871], [0], [70837214], [8388617], [], []
Sat Apr 10 17:42:54 2010
Error 600 happened during db open, shutting down database
USER: terminating instance due to error 600
Instance terminated by USER, pid = 30331
ORA-1092 signalled during: alter database open resetlogs...
Sat Apr 10 17:52:22 2010
USER: terminating instance due to error 1092
Instance terminated by USER, pid = 30331
5，重新连接数据库并启动到mount状态
SQL> conn /as sysdba
SQL> startup mount pfile=/home/oracle/pfile.ora;
ORACLE instance started.
Total System Global Area 1019215872 bytes
Fixed Size                  1223200 bytes
Variable Size             251659744 bytes
Database Buffers          763363328 bytes
Redo Buffers                2969600 bytes
Database mounted.
SQL> select file#,CHECKPOINT_CHANGE# from v$datafile;
     FILE# CHECKPOINT_CHANGE#
---------- ------------------
         1           70824867
         2           70824867
         3           70824867
         4           70824867
         5           70824867
         6           70824867
         7           70824867
7 rows selected.
数据文件SCN号一致了。。可是打不开
SQL> alter database open;
alter database open
*
ERROR at line 1:
ORA-01113: file 1 needs media recovery
ORA-01110: data file 1: '/opt/oracle/oradata/mcerp/system01.dbf'
我尝试了下面的方法（relog是刚才新建的）
SQL> recover database using backup controlfile until cancel;
ORA-00279: change 70824867 generated at 04/10/2010 17:42:52 needed for thread 1
ORA-00289: suggestion :
/opt/oracle/flash_recovery_area/MCERP/archivelog/2010_04_10/o1_mf_1_1_%u_.arc
ORA-00280: change 70824867 for thread 1 is in sequence #1
Specify log: {<RET>=suggested | filename | AUTO | CANCEL}
/opt/oracle/oradata/mcerp/redo01.log
ORA-00339: archived log does not contain any redo
ORA-00334: archived log: '/opt/oracle/oradata/mcerp/redo01.log'
ORA-01547: warning: RECOVER succeeded but OPEN RESETLOGS would get error below
ORA-01194: file 1 needs more recovery to be consistent
ORA-01110: data file 1: '/opt/oracle/oradata/mcerp/system01.dbf'
SQL> recover database using backup controlfile until cancel;
ORA-00279: change 70824867 generated at 04/10/2010 17:42:52 needed for thread 1
ORA-00289: suggestion :
/opt/oracle/flash_recovery_area/MCERP/archivelog/2010_04_10/o1_mf_1_1_%u_.arc
ORA-00280: change 70824867 for thread 1 is in sequence #1
Specify log: {<RET>=suggested | filename | AUTO | CANCEL}
/opt/oracle/oradata/mcerp/redo02.log
ORA-00339: archived log does not contain any redo
ORA-00334: archived log: '/opt/oracle/oradata/mcerp/redo02.log'
ORA-01547: warning: RECOVER succeeded but OPEN RESETLOGS would get error below
ORA-01194: file 1 needs more recovery to be consistent
ORA-01110: data file 1: '/opt/oracle/oradata/mcerp/system01.dbf'
SQL> recover database using backup controlfile until cancel;
ORA-00279: change 70824867 generated at 04/10/2010 17:42:52 needed for thread 1
ORA-00289: suggestion :
/opt/oracle/flash_recovery_area/MCERP/archivelog/2010_04_10/o1_mf_1_1_%u_.arc
ORA-00280: change 70824867 for thread 1 is in sequence #1
Specify log: {<RET>=suggested | filename | AUTO | CANCEL}
/opt/oracle/oradata/mcerp/redo03.log
Log applied.
Media recovery complete.
SQL> select file#,CHECKPOINT_CHANGE# from v$datafile;
     FILE# CHECKPOINT_CHANGE#
---------- ------------------
         1           70824871
         2           70824871
         3           70824871
         4           70824871
         5           70824871
         6           70824871
         7           70824871
7 rows selected.
SQL> alter database open;
alter database open
*
ERROR at line 1:
ORA-01589: must use RESETLOGS or NORESETLOGS option for database open
SQL> alter database open resetlogs;
alter database open resetlogs
*
ERROR at line 1:
ORA-00603: ORACLE server session terminated by fatal error 

1，数据库版本
SQL> select * from v$version
BANNER
----------------------------------------------------------------
Oracle Database 10g Enterprise Edition Release 10.2.0.1.0 - 64bi
PL/SQL Release 10.2.0.1.0 - Production
CORE    10.2.0.1.0      Production
TNS for Linux: Version 10.2.0.1.0 - Production
NLSRTL Version 10.2.0.1.0 - Production
2，操作系统版本        
[oracle@test ~]$ uname -a
Linux test 2.6.18-92.el5 #1 SMP Tue Apr 29 13:16:15 EDT 2008 x86_64 x86_64 x86_64 GNU/Linux
3，初始化参数文件：   （添加红色部分隐藏参数）   
[oracle@test ~]$ cat /home/oracle/pfile.ora
mcerp.__db_cache_size=3238002688
mcerp.__java_pool_size=33554432
mcerp.__large_pool_size=16777216
mcerp.__shared_pool_size=1677721600
mcerp.__streams_pool_size=33554432
*._allow_error_simulation  = TRUE
*._allow_resetlogs_corruption = TRUE
*._corrupted_rollback_segments=(sytem,_SYSSMU1$, _SYSSMU2$, _SYSSMU3$, _SYSSMU4$, _SYSSMU5$, _SYSSMU6$,
_SYSSMU7$, _SYSSMU8$, _SYSSMU9$, _SYSSMU10$,SYSSMU11$, _SYSSMU12$, _SYSSMU13$, _SYSSMU14$, _SYSSMU15$,
_SYSSMU16$, _SYSSMU17$, _SYSSMU18$, _SYSSMU19$, _SYSSMU20$)
*.audit_file_dest='/mc/oracle/admin/mcerp/adump'
*.background_dump_dest='/mc/oracle/admin/mcerp/bdump'
*.compatible='10.2.0.1.0'
*.control_files='/mc/oracle/oradata/mcerp/control01.ctl','/mc/oracle/oradata/mcerp/control02.ctl','/mc/ora
cle/oradata/mcerp/control03.ctl'
*.core_dump_dest='/mc/oracle/admin/mcerp/cdump'
*.db_block_size=8192
*.db_domain=''
*.db_file_multiblock_read_count=16
*.db_name='mcerp'
*.db_recovery_file_dest='/mc/oracle/flash_recovery_area'
*.db_recovery_file_dest_size=21474836480
*.dispatchers='(PROTOCOL=TCP) (SERVICE=mcerpXDB)'
*.job_queue_processes=10
*.open_cursors=300
*.pga_aggregate_target=1671430144
*.processes=500
*.remote_login_passwordfile='EXCLUSIVE'
*.sessions=500
*.sga_target=1015339008
*.undo_management='AUTO'
*.undo_tablespace='UNDOTBS1'
*.user_dump_dest='/mc/oracle/admin/mcerp/udump'
4，启动数据库到NOMOUNT        
SQL> startup nomount pfile=/home/oracle/pfile.ora
ORACLE instance started.
Total System Global Area 1019215872 bytes
Fixed Size                  2025808 bytes
Variable Size             251659952 bytes
Database Buffers          759169024 bytes
Redo Buffers                6361088 bytes
5，创建控制文件并关闭归档模式
SQL> CREATE CONTROLFILE REUSE DATABASE "MCERP" RESETLOGS  ARCHIVELOG
    MAXLOGFILES 16
    MAXLOGMEMBERS 3
    MAXDATAFILES 100
    MAXINSTANCES 8
    MAXLOGHISTORY 292
LOGFILE
  GROUP 1 '/mc/oracle/oradata/mcerp/redo01.log'  SIZE 50M,
  GROUP 2 '/mc/oracle/oradata/mcerp/redo02.log'  SIZE 50M,
  GROUP 3 '/mc/oracle/oradata/mcerp/redo03.log'  SIZE 50M
DATAFILE
  '/mc/oracle/oradata/mcerp/system01.dbf',
  '/mc/oracle/oradata/mcerp/undotbs01.dbf',
  '/mc/oracle/oradata/mcerp/sysaux01.dbf',
  '/mc/oracle/oradata/mcerp/users01.dbf',
  '/mc/oracle/oradata/mcerp/RMAN_TS.dbf',
  '/mc/oracle/oradata/mcerp/testouhs.dbf',
  '/mc/oracle/oradata/mcerp/zbb01.dbf'
CHARACTER SET ZHS16GBK;
Control file created.
关闭归档模式
SQL> alter database noarchivelog;
Database altered.

6，在MOUNT状态下执行下面的操作，发现数据库文件的SCN号不一致
SQL> select file#,CHECKPOINT_CHANGE# from v$datafile;
     FILE# CHECKPOINT_CHANGE#
---------- ------------------
         1           70721887
         2           70824865
         3           70772352
         4           70824865
         5           70772352
         6           70824865
         7           70824865
connected to target database: MCERP (DBID=1423600306, not open)
7，调整SCN        
关于调整scn的详细说明：http://www.orablogger.com/?tag=adjust-scn
SQL> alter session set events '10015 trace name ADJUST_SCN level 20000';
Session altered.
SQL> select file#,CHECKPOINT_CHANGE# from v$datafile;
     FILE# CHECKPOINT_CHANGE#
---------- ------------------
         1           70866341
         2           70866341
         3           70866341
         4           70866341
         5           70866341
         6           70866341
         7           70866341
7 rows selected.
        
8，OPEN数据库&RESETLOGS
SQL> alter database open resetlogs;
Database altered.
9，给临时表空间添加数据文件        
SQL> alter tablespace temp add tempfile '/mc/oracle/oradata/mcerp/temp01.dbf' size 100M
Tablespace altered.
10，验证一下        
SQL> conn mctest3/mctest
Connected.
SQL> select max(ctime) from MCTEST3.sys0023_table_log;
MAX(CTIME)
------------
19-MAR-10                        <==这个备份确实是3月19号做的
11，如果真要使用该数据库，赶紧执行EXPDP/IMPDP        
 Copyright ©2010 lyt. All Rights Reserved.



study
表空间

1.创建一个表空间lyt，数据库文件存储于'G:\oracle\product\10.2.0\oradata\lyt'下，创建语句如下：
  CREATE TABLESPACE lyt DATAFILE
     'G:\oracle\product\10.2.0\oradata\lyt\lyt_001.dbf' SIZE 200M EXTENT
     MANAGEMENT LOCAL;
  CREATE TEMPORARY TABLESPACE TEMP TEMPFILE
     'E:\oracle\product\10.2.0\oradata\lyt\temp_01.dbf' SIZE 250M EXTENT
     MANAGEMENT LOCAL UNIFORM SIZE 1M;
2.数据库修改数据文件方法
   ALTER DATABASE RENAME FILE 'C:\TS_FZ4_DATA_APPSYS.DBF' TO 'D:\oradata\SYS\TS_FZ4_DATA_APPSYS.DBF';
 
 Copyright ©2010 lyt. All Rights Reserved.



study
删除表空间

DROP TABLESPACE tablespace_name [INCLUDING CONTENTS [AND DATAFILES] [CASCADE CONSTRAINTS]

SQL> create tablespace test datafile '/oracle/DDS/data04/alvindb/test.dbf' size 20m reuse;

Tablespace created.

SQL> create table test (id varchar2(20)) tablespace test;

Table created.

SQL> drop tablespace test;
drop tablespace test
表空间不为空，不能删除

SQL> drop tablespace test including contents;

Tablespace dropped.

SQL> !ls /oracle/DDS/data04/alvindb/test.dbf
/oracle/DDS/data04/alvindb/test.dbf

没有加上and datafiles参数时，oracle不会自动删除datafiles。

SQL> create tablespace test datafile '/oracle/DDS/data04/alvindb/test.dbf' size 20m reuse;

Tablespace created.

SQL> drop tablespace test including contents and datafiles;

Tablespace dropped.

加上and datafiles参数时，oracle会自动删除datafiles。

SQL> !ls /oracle/DDS/data04/alvindb/test.dbf
/oracle/DDS/data04/alvindb/test.dbf: No such file or directory

[CASCADE CONSTRAINTS]：
Specify CASCADE CONSTRAINTS to drop all referential integrity constraints from tables outside tablespace that refer to primary and unique keys of tables inside tablespace. If you omit this clause and such referential integrity constraints exist, then Oracle Database returns an error and does not drop the tablespace.
 Copyright ©2011 lyt. All Rights Reserved.




study
用户

1.为表空间lyt创建用户lyt 密码为lyt
  CREATE USER lyt IDENTIFIED BY lyt
  DEFAULT TABLESPACE LYT TEMPORARY TABLESPACE TEMP
         QUOTA UNLIMITED ON LYT;
2.给用户lyt授权
  GRANT CONNECT,RESOURCE TO lyt;
 
CREATE USER username IDENTIFIED BY password
OR IDENTIFIED EXETERNALLY
OR IDENTIFIED GLOBALLY AS ‘CN=user’
[DEFAULT TABLESPACE tablespace]
[TEMPORARY TABLESPACE temptablespace]
[QUOTA [integer K[M] ] [UNLIMITED] ] ON tablespace
[,QUOTA [integer K[M] ] [UNLIMITED] ] ON tablespace
[PROFILES profile_name]
[PASSWORD EXPIRE]
[ACCOUNT LOCK or ACCOUNT UNLOCK]
 

语法描述：
CREATE [UNDO]  TABLESPACE tablespace_name
[DATAFILE datefile_spec1 [,datefile_spec2] ......
[ { MININUM EXTENT integer [k|m]
| BLOCKSIZE integer [k]
|logging clause
|FORCE LOGGING
|DEFAULT  {data_segment_compression} storage_clause
|[online|offline]
|[PERMANENT|TEMPORARY]
|extent_manager_clause
|segment_manager_clause}]
1、undo
说明系统将创建一个回滚表空间。
在9i中数据库管理员可以不必管理回滚段，只有建立了undo表空间，系统就会自动管理回滚段的分配，回收的工作。当然,也可以创建一般的表空间,在上面创建回滚段.不过对于用户来说,系统管理比自己管理要好很多.如果需要自己管理,请参见回滚段管理的命令详解.
当没有为系统指定回滚表空间时,系统将使用system系统回滚段来进行事务管理。
2、tablespace
    指出表空间的名称。
3、datafile  datefile_spec1
指出表空间包含什么空间文件。datefile_spec1 是形如  ['filename'] [SIZE integer [ K | M ]] [REUSE] [autoextend_clause]
[autoextend_clause]是形如： AUTOEXTEND { OFF | ON [ NEXT integer [ K | M ] ] [maxsize_clause] }
其中filename是数据文件的全路径名，size是文件的大小,REUSE表示文件是否被重用.
AUTOEXTEND表明是否自动扩展. OFF | ON  表示自动扩展是否被关闭.NEXT 表示数据文件满了以后,扩展的大小.
maxsize_clause表示数据文件的最大大小.形如MAXSIZE { UNLIMITED | integer [ K | M ] }.UNLIMITED 表示无限的表空间.integer是数据文件的最大大小.
 DATAFILE 'D:\oracle\oradata\IMAGEDATA01.dbf' SIZE 2000M,
    'D:\oracle\oradata\IMAGEDATA02.dbf' SIZE 2000M
4、MININUM EXTENT integer [k|m]
指出在表空间中范围的最小值。这个参数可以减小空间碎片，保证在表空间的范围是这个数值的整数倍。
5、BLOCKSIZE integer [k]
这个参数可以设定一个不标准的块的大小。如果要设置这个参数，必须设置db_block_size,至少一个db_nk_block_size,并且声明的integer的值必须等于db_nk_block_size.
注意：在临时表空间不能设置这个参数。
6、logging clause
这个子句声明这个表空间上所有的用户对象的日志属性（缺省是logging），包括表，索引，分区，物化视图，物化视图上的索引，分区。
7、FORCE LOGGING
使用这个子句指出表空间进入强制日志模式。此时，系统将记录表空间上对象的所有改变，除了临时段的改变。这个参数高于对象的nologging选项。
注意：设置这个参数数据库不行open并且出于读写模式。而且，在临时表空间和回滚表空间中不能使用这个选项。
8、DEFAULT storage_clause
声明缺省的存储子句。
9、online|offline
改变表空间的状态。online使表空间创建后立即有效.这是缺省值.offline使表空间创建后无效.这个值，可以从dba_tablespace中得到。
10、PERMANENT|TEMPORARY
指出表空间的属性，是永久表空间还是临时表空间。永久表空间存放的是永久对象，临时表空间存放的是session生命期中存在的临时对象。这个参数 生成的临时表空间创建后一直都是字典管理，不能使用extent management local选项。如果要创建本地管理表空间，必须使用create temporary tablespace
注意，声明了这个参数后，不能声明block size
11、extent_management_clause
这是最重要的子句，说明了表空间如何管理范围。一旦你声明了这个子句，只能通过移植的方式改变这些参数。
如果希望表空间本地管理的话，声明local选项。本地管理表空间是通过位图管理的。autoallocate说明表空间自动分配范围，用户不能指定范围的大小。只有9.0以上的版本具有这个功能。uniform说明表空间的范围的固定大小，缺省是1m。
不能将本地管理的数据库的system表空间设置成字典管理。
oracle公司推荐使用本地管理表空间。
如果没有设置extent_management_clause，oracle会给他设置一个默认值。如果初始化参数compatible小于9.0.0,那么系统创建字典管理表空间。如果大于9.0.0,那么按照如下设置：
如果没有指定default storage_clause,oracle创建一个自动分配的本地管理表空间。
否则，如果指定了mininum extent,那么oracle判断mininum extent 、initial、next是否相等,以及pctincrease是否=0.如果满足以上的条件，oracle创建一个本地管理表空间，extent size是initial.如果不满足以上条件，那么oracle将创建一个自动分配的本地管理表空间。
如果没有指定mininum extent。initial、那么oracle判断next是否相等,以及pctincrease是否=0。如果满足oracle创建一个本地管理表空间并指定uniform。否则oracle将创建一个自动分配的本地管理表空间。
注意：本地管理表空间只能存储永久对象。如果你声明了local,将不能声明default storage_clause,mininum extent、temporary.
EXTENT MANAGEMENT LOCAL
12、segment_management_clause
 SEGMENT SPACE MANAGEMENT  AUTO
 
下面是实际应用中的一个例子:
使用例子1:
CREATE TABLESPACE "IMAGEDATA"
    NOLOGGING
    DATAFILE 'C:\oracle\product\10.2.0\oradata\UTF\DATA01.dbf' SIZE 2000M,
    'C:\oracle\product\10.2.0\oradata\UTF\DATA02.dbf' SIZE 2000M,
    'C:\oracle\product\10.2.0\oradata\UTF\DATA03.dbf' SIZE 2000M,
    'C:\oracle\product\10.2.0\oradata\UTF\DATA04.dbf' SIZE 2000M,
    'C:\oracle\product\10.2.0\oradata\UTF\DATA05.dbf' SIZE 2000M EXTENT
    MANAGEMENT LOCAL SEGMENT SPACE MANAGEMENT  AUTO
使用例子2:
CREATE TABLESPACE "IMAGEDATA"
LOGGING
DATAFILE 'E:\ORACLE\ORADATA\DATA_01.DBF' SIZE
2000M REUSE AUTOEXTEND
ON NEXT 51200K MAXSIZE 3900M,
'E:\ORACLE\ORADATA\XL\DATA_02.DBF' SIZE 2000M REUSE
AUTOEXTEND
ON NEXT 51200K MAXSIZE 3900M,
'E:\ORACLE\ORADATA\XL\DATA_03.DBF' SIZE 2000M REUSE
AUTOEXTEND
ON NEXT 51200K MAXSIZE 3900M,
'E:\ORACLE\ORADATA\XL\DATA_04.DBF' SIZE 2000M REUSE
AUTOEXTEND
ON NEXT 51200K MAXSIZE 3900M
EXTENT MANAGEMENT LOCAL SEGMENT SPACE MANAGEMENT AUTO
 
 
1、创建临时表空间
  CREATE UNDO TABLESPACE "TBS_UNDO01"
      DATAFILE 'D:\oracle\UNDO01.dbf' SIZE 2000M,
      'D:\oracle\DATA02.dbf' SIZE 2000M,
      'D:\oracle\UNDO03.dbf' SIZE 2000M
      EXTENT
*     MANAGEMENT LOCAL
 Copyright ©2010 lyt. All Rights Reserved.




study
数据库关联

--Create database link
create public database link SJZ_LINK
  connect to SJZ_POLICE IDENTIFIED BY SJZ_POLICE
  using '10.25.1.96/cc.sjzpolice';

 Copyright ©2010 lyt. All Rights Reserved.


study
database link

database link即数据库连接只是连到别的数据库的快捷方式。
创建: 
1.根据远端的信息用Net Manager设置好能连接远端的服务及监听程序。 
2.create public database link fwq12 
connect to fzept identified by neu 
using 'fjept' //fjept为刚刚配置好的服务名
使用：
查询远端数据库里的表 
SELECT …… FROM 表名@数据库链接名; 
查询、删除和插入数据和操作本地的数据库是一样的，只不过表名需要写成“表名@dblink服务器”而已。 
附带说下同义词创建: 
CREATE SYNONYM同义词名FOR 表名; 
CREATE SYNONYM同义词名FOR 表名@数据库链接名; 
删除dblink：DROP PUBLIC DATABASE LINK linkfwq。 
假如创建全局dblink，则必须使用systm或sys用户，在database前加public。
SQL>create public database link beijing connect to scott identified by tiger using ‘tobeijing’; 
则创建了一个以scott用户和北京数据库的链接beijing，我们查询北京的scott数据:
SQL>select * from emp@beijing;
这样就可以把深圳和北京scott用户的数据做成一个整体来处理。
建立同义词，为了使有关分布式操作更透明，ORACLE数据库里有同义词的对象synonym 
SQL>create synonym bjscottemp for emp@beijing; 
于是就可以用bjscottemp来替代带@符号的分布式链接操作emp@beijing。

 Copyright ©2010 lyt. All Rights Reserved.





study
删库数据

1、
　　select 'Drop table '||table_name||';'
　　from all_tables
　　where owner='要删除的用户名(注意要大写)';
　　2、
　　删除所有表
　　以用户test为例
　　for example:
　　declare
　　cursor cur1 is select table_name from dba_tables where owner='TEST';
　　begin
　　for cur2 in cur1 loop
　　execute immediate 'drop table test.'||cur2.table_name;
　　end loop;
　　end;
　　3、这个删除当前用户的所有对象(表、视图、触发器、存储过程、函数)
　　DECLARE
　　TYPE name_list IS TABLE OF VARCHAR2(40);
　　TYPE type_list IS TABLE OF VARCHAR2(20);
　　Tab_name name_list:=name_list();
　　Tab_type type_list:=type_list();
　　sql_str VARCHAR2(500);
　　BEGIN
　　sql_str := 'select uo.object_name,uo.object_type from user_objects uo where uo.object_type not in(''INDEX'',''LOB'') order by uo.object_type desc';
　　EXECUTE IMMEDIATE sql_str BULK COLLECT INTO tab_name,tab_type;
　　FOR i IN Tab_name.FIRST.. Tab_name.LAST LOOP
　　sql_str := 'DROP ' || Tab_type(i) || ' ' || Tab_name(i);
　　EXECUTE IMMEDIATE sql_str;
　　END LOOP;
　　END;

 Copyright ©2011 lyt. All Rights Reserved.












 

