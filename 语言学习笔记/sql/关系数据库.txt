
第一节 关系系统

在第二章比较详细地讨论了关系模型的三个基本要素：关系数据结构、关系的完整性和三类等价的关系操作。
　　关系系统和关系模型是两个密切相关而又不同的概念。支持关系模型的数据库管理系统称为关系系统。这种说法很笼统，因为关系模型中并非每一部分都是同等重要的，所以并不苛求一个实际的关系数据库管理系统必须完全支持关系模型，也不苛求完全支持关系模型的系统才能称为关系系统。因此，可以给出一个关系系统的最小要求以及分类的定义。
　　4.1.1 关系系统的定义
　　一个系统可定义为关系系统，当且仅当它：
　　（1）支持关系数据库（关系数据结构）。
　　从用户观点看，数据库由表构成，并且只有表这一种结构。
　　（2）支持选择、投影和（自然）连接运算，对这些运算不必要求定义任何物理存取路径。
　　一个系统仅支持关系数据库而没有选择、投影和连接运算功能的，不能称为关系系统。
　　 
　　一个系统虽然支持这三种运算，但要求定义物理存取路径，如要求用户建立索引才能按索引字段检索记录，也不能称为关系系统。
　　当然并不要求关系系统的选择、投影、连接运算和关系代数的相应运算完全一样，而只要求有等价的这三种运算功能就行。
　　下面对关系系统的定义做几点解释：
　　（1）为什么关系系统除了要支持关系数据结构外，还必须支持选择、投影、连接运算呢？因为不支持这三种关系运算的系统，用户使用仍不方便，不能提高用户的生产率，而提高用户生产率正是关系系统的主要目标之一。
　　（2）为什么要求这三种运算不能依赖于物理存取路径呢？因为依赖物理存取路径来实现关系运算就降低或丧失了数据的物理独立性。不依赖物理存取路径来实现关系运算就要求关系系统自动地选择路径。为此，系统要进行查询优化，以获得较好的性能。这正是关系系统实施的关键技术。
　　（3）要求关系系统支持这三种最主要的运算而不是关系代数的全部运算功能，是因为它们是最有用的运算功能，能解决绝大部分的实际回题。
　　4.1.2 关系系统的分类
　　有了关系系统的定义，就可以根据它来区分哪些系统是贴了“关系型”标签的非关系系统，哪些是关系系统。当前，许多产品如DB2，Oracle，Sybase，Informix，Ingres是关系系统。我国自主开发的Pbase和Easybase（中国人民大学）、Cobase（北京大学、中国人民大学与中软公司）、OPENBASE（东大阿尔派）、DM2（华中理工大学）等数据库管理系统是关系系统，这里不一一列举了。
　　在4.1.1节中定义的关系系统是关系系统的最小要求，许多实际系统，如上面提到的那些系统都不同程度地超过了这些要求。
　　4.1.3 全关系系统的十二条基本准则
　　全关系型的系统应该完全地支持关系模型的所有特征，这是个原则。关系模型的奠基人E.F.Codd具体地给出了全关系型的关系系统应遵循的十二条基本准则。从实际意义上看，这十二条准则可以作为评价或购买关系型产品的标准。从理论意义上看，它是对关系数据模型的具体而又深入的论述，是从理论和实际紧密结合的高度对关系型DBMS的评述。
　　准则0 一个关系型的DBMS必须能完全通过它的关系能力来管理数据库。
　　准则0是下面十二条准则的基础。准则0的一个推论是：任何声称是关系型的DBMS必须在关系这个级别上支持数据的插入、修改和删除(即一次多个记录的操作级别)。
　　不管一个系统是否还具有非关系的管理数据的能力，它必须满足准则0。任何不满足准则0的DBMS不配称为关系型DBMS。
　　在一些“关系型”DBMS产品的说明书中，常常建议用户“为取得可接受的性能”使用某些非关系的能力。这实际上是一种借口，表明这些系统没有为改善关系型系统的性能而进行必要的优化工作。违反准则0的“关系型”DBMS给用户带来的危害是；用户不能得到真正的关系型DBMS所具有的优点。
　　准则0的另一个推论是：关系型DBMS必须遵循信息准则和保证访问(存取)准则。
　　准则1 信息准则。关系型DBMS的所有信息都应在逻辑一级上用一种方法即表中的值显式地表示。
　　进一步地，表名、列名和域名等都用系统内部表(即数据字典表)中的值表示。数据字典本身是一个动态的用来描述元数据的关系数据库。
　　满足信息准则不仅是为了提高用户的生产率，而且也是为了使软件厂商在定义其他软件包(例如应用软件辅助开发工具、专家系统等)时更加简便合理。这些软件包可以与关系型DBMS接口，并与DBMS融合成一体。这样，这些软件包能够检索存储在数据字典中的信息，需要的话可以借助DBMS的操作把新的信息存入字典中。
　　要求满足信息准则的另一个原因是使得DBA维护数据库的工作更简单、更有效。因为DBA感到最困难的是用户向他们询问数据库中是否存有某种信息。一些非关系型系统的DBA往往无法对此作出确定的回答，而关系型DBMS完全可以解答这些查询。
　　准则2 保证访问准则。依靠表名、主码和列名的组合，保证能以逻辑方式访问关系数据库中的每个数据项(分量值)。
　　访问关系数据库中的数据项可以有许多不同的逻辑方式(可能上千种)，但必须保证有一种方式是可以访问每个数据单元的。这种方式独立于关系数据库的物理结构。这一点十分重要，因为在关系数据库中许多面向计算机的概念(如扫描下一个地址)已经去掉了。
　　保证访问准则表明关系系统所采用的是相联寻址(Association Addressing)的访问模式，而不是那种面向机器的寻址方法，这是关系系统独有的方式。
　　准则3 空值的系统化处理。全关系型的DBMS应支持空值的概念，并用系统化的方式处理空值。
　　空值是“不知道”或“无意义”的值。在关系模型中，空值的概念很重要。例如，为了支持关系模型的完整性，要求关系的主码不能取空值。用户应该了解空值的概念和处理空值的策略。例如，当求总和、平均值等集函数时，如何处理空值将直接影响到结果。
　　以往处理空值的办法常常是对每个允许取空值的字段定义一种特殊的值来表示空值。这不是系统化的好办法。因为这样的话，用户必须对每个字段或域采用不同的方法来处理空值。这种方法必然会大大降低用户生产率。而且关系语言是一种非常高级的语言，要这样做常常十分困难甚至做不到。因此必须用系统化的办法来处理空值。
　　准则4 基于关系模型的动态的联机数据字典。数据库的描述在逻辑级上应该和普通数据采用同样的表示方式，使得授权用户可以使用查询一般数据所用的关系语言来查询数据库的描述信息。
　　这一准则的一个推论是：每个用户(无论是应用程序员还是最终用户)只需学习一种数据模型。而非关系系统常常不具备这个优点。
　　另一个推论是授权用户可以很容易地扩充数据字典，使之变成完备的主动的关系数据字典，即使厂商有时没有提供这样的数据字典。
　　准则5 统一的数据子语言准则。一个关系系统可以具有几种语言和多种终端使用方式(如表格填空方式、命令方式等)。但必须有一种语言，它的语句可以表示为具有严格语法规定的字符串，并能全面地支持以下功能：
　　· 数据定义、视图定义
　　· 数据操作(交互式或程序式)
　　· 完整性约束
　　· 授权
　　· 事务处理功能(事务开始、提交、滚回)
　　关系方法是高度动态的，即很少需要停止数据库的活动。非关系系统则不是这样。例如，非关系系统在建立、修改数据库模式时就必须停止存取数据库的操作。因此，关系系统没有必要把上面的功能分为若干种语言(DDL，DML等)来实现。关系数据语言是一体化的统一的数据子语言，它使程序员可以首先交互地调试数据库语句，调试正确后再嵌入程序中。这样便大大提高了程序员的生产率。
　　准则6 视图更新准则。所有理论上可更新的视图也应该允许由系统更新。
　　什么叫“一个视图是理论上可更新的视图”呢？它是指对此视图的更新要求，存在一个与时间无关的算法，该算法可以无二义性地把更新要求转换为对基本表的更新序列。
　　目前，有的系统只允许对基本表更新，不支持对视图的更新。有的只允许对有限的一类视图如行列子集视图更新。
　　视图更新准则对于系统支持数据逻辑独立性是不可缺少的。
　　准则7 高级的插入、修改和删除操作。关系系统的操作对象是单一的关系。以关系为操作对象不仅简化了用户查询，提高了用户生产率，而且也为系统提供了很大的余地来进行查询优化，提高了系统的运行效率。它允许系统来选择存取路径，以便得到最有效的运行代码。
　　这条准则对于获得有效的分布式事务处理也是十分重要的。这样可以避免从远程结点传送一个记录就要发出一次请求。实现一次请求传送一个关系，从而节省了通信代价。
　　准则8 数据物理独立性。无论数据库的数据在存储表示或存取方法上作任何变化，应用程序和终端活动都保持逻辑上的不变性。
　　为了保证这一独立性。DBMS必须清楚明确地区分基本关系的逻辑和语义方面及其物理和效率方面、应用程序仅涉及逻辑方面。
　　准则9 数据逻辑独立性。当对基本关系进行理论上信息不受损害的任何改变时，应用程序和终端活动都保持逻辑上的不变性。
　　对基本关系来讲，什么样的变化在理论上是保持信息不受损害的变化呢？举两个例子来说明。把一个基本表按行的内容或者按列名分解为两个表，若这两个表都保留原基本表的主码，则这种变换在理论上是保持信息不受损失的。用无损连接方法(见5.4节)把两个表合成一个表也不会破坏信息的变换。
　　为了尽可能提高数据逻辑独立性，DBMS必须能对理论上可更新的视图执行插入、修改和删除操作，即必须满足准则6。
　　数据库数据物理独立性和数据逻辑独立性给数据库设计带来了很大的好处。它使得关系数据库设计易做、易改。设计人员发现错误可随时修改而不会像非关系型DBMS中由于设计错误而造成很大损失。在开始进行关系数据库设计时，不必对应用变化、系统效率等各方面考虑周全后才进行实现工作，而可以先实施并运行数据库，当需要时再改变数据库的逻辑结构甚至物理结构。准则8和准则9保证了应用程序和终端活动都保持逻辑上的不变性。
　　准则l0 数据完整性的独立性。关系数据库的完整性约束条件必须是用数据库语言定义并存储在数据字典中的，而不是在应用程序中加以定义的。
　　任何关系数据库必须满足两类完整性约束条件，即实体完整性和参照完整性。此外，对于某一具体的关系数据库还需要反映业务政策和管理规章的完整性约束条件。对于一个全关系型的DBMS，这些完整性约束条件应该能用数据库语言加以定义，并能把定义存入数据字典中。它们应独立于应用程序。这样，当业务政策或管理规章变化时，只要改变存储在数据字典中的完整性定义语句而不会在逻辑上影响应用程序和终端活动。
　　准则11 分布独立性。关系型DBMS具有分布独立性。
　　所谓分布独立性是指关系型DBMS具有这样的数据库语言，它使应用程序和终端活动在下列情况下保持逻辑不变性：
　　· 在第一次引入分布式数据时，即如果原来的DBMS只管理非分布式的数据，而现在引入了分布式数据。
　　· 当数据重新分布时，即如果DBMS能管理分布式数据，现在要改变原来的数据分布。
　　这两种情况概括了无论是分布的或非分布的关系型DBMS都能完全地支持这条准则。
　　 
　　一个不支持分布式数据库的全关系型的DBMS能够加以扩充提供以上的支持，使应用程序和终端活动无论在最初的数据还是以后的数据重新分布时都能在逻辑上保持不变。关系型DBMS之所以具有这个优点，其原因是：
　　（1）在分布数据时具有分解灵活性。
　　（2）在组合各个结点上子事务作业的结果时具有关系操作的重组能力。
　　（3）当从远程结点检索数据时可以一次请求传送一个关系，从而节省了通信代价。
　　（4）由于关系数据库语言是非常高级的语言，系统可以分析查询语义，执行查询优化。而对于一次处理一个记录的数据语言，系统是无法分析查询语义的。
　　准则12 无破坏准则。如果一个关系系统具有一个低级(指一次一个记录)语言，则这个低级语言不能违背或绕过完整性准则。
　　在关系方法中，为获得数据完整性的独立性(准则10)就要让完整性约束条件和数据的逻辑结构相独立。用准则12就很容易帮助识别那些贴着“关系”标签的非关系系统。因为这一系统已经在关系接口之下有一个应用接口，因此很难满足准则12。这时DBA不能控制他们的数据库，不能保证数据库的完整性状态。
　　以上是E.F.Codd给出的衡量一个全关系型DBMS的十二条准则。这十二条准则都以准则0为基础。但仅有准则0是不够的。不支持信息准则，不保证访问准则，不支持空值准则和数据字典准则就不能保证数据库的完整性。和早期的DBMS相比，这四条准则使数据的管理和控制(授权和完整性控制)达到了更高的标准。准则8～11要求全关系型DBMS具有四种独立性。其中数据的物理独立性和逻辑独立性已为大家所熟知，而数据完整性的独立性和分布独立性也已为大家重视。准则10、准则11已变得和准则8、准则9同等重要。



第二节 关系系统数据库的查询优化

查询优化在关系数据库系统中有着非常重要的地位。关系数据库系统和非过程化的SQL语言能够取得巨大的成功，关键是得益于查询优化技术的发展。关系查询优化是影响RDBMS性能的关键因素。
　　优化对关系系统来说既是挑战又是机遇。所谓挑战是指关系系统为了达到用户可接受的性能必须进行查询优化。由于关系表达式的语义级别很高，使关系系统可以从关系表达式中分析查询语义，提供了执行查询优化的可能性。这就为关系系统在性能上接近甚至超过非关系系统提供了机遇。 
　　4.2.1 关系系统及其查询优化
　　关系系统的查询优化既是RDBMS实现的关键技术又是关系系统的优点所在。它减轻了用户选择存取路径的负担。用户只要提出“干什么”，不必指出“怎么干”。对比一下非关系系统中的情况：用户使用过程化的语言表达查询要求，执行何种记录级的操作，以及操作的序列是由用户而不是由系统来决定的。因此用户必须了解存取路径，系统要提供用户选择存取路径的手段，查询效率由用户的存取策略决定。如果用户做了愚蠢的选择，系统是无能为力对此加以改进的。这就要求用户有较高的数据库技术和程序设计水平。
　　查询优化的优点不仅在于用户不必考虑如何最好地表达查询以获得较好的效率，而且在于系统可以比用户程序的“优化”做得更好。这是因为：
　　（1）优化器可以从数据字典中获取许多统计信息，例如关系中的元组数、关系中每个属性值的分布情况等。优化器可以根据这些信息选择有效的执行计划，而用户程序则难以获得这些信息。
　　（2）如果数据库的物理统计信息改变了，系统可以自动对查询进行重新优化以选择相适应的执行计划。在非关系系统中必须重写程序，而重写程序在实际应用中往往是不太可能的。
　　（3）优化器可以考虑数百种不同的执行计划，而程序员一般只能考虑有限的几种可能性。
　　（4）优化器中包括了很多复杂的优化技术，这些优化技术往往只有最好的程序员才能掌握。系统的自动优化相当于使得所有人都拥有这些优化技术。
　　关系数据库查询优化的总目标是：选择有效的策略，求得给定关系表达式的值。
　　实际系统对查询优化的具体实现不尽相同，但一般来说，可以归纳为四个步骤：
　　① 将查询转换成某种内部表示，通常是语法树。
　　② 根据一定的等价变换规则把语法树转换成标准（优化）形式。
　　③ 选择低层的操作算法。对于语法树中的每一个操作需要根据存取路径、数据的存储分布、存储数据的聚簇等信息来选择具体的执行算法。
　　④ 生成查询计划。查询计划也称查询执行方案，是由一系列内部操作组成的。这些内部操作按一定的次序构成查询的一个执行方案。通常这样的执行方案有多个，需要对每个执行计划计算代价，从中选择代价最小的一个。在集中式关系数据库中，计算代价时主要考虑磁盘读写的I/O次数，也有一些系统还考虑了CPU的处理时间。
　　步骤③和步骤④实际上没有清晰的界限，有些系统是作为一个步骤处理的。对于一个查询可能会有很多候选的查询计划，因此应采取适当的启发式技术来缩减查询计划的搜索空间。另外由于统计信息的不精确性，中间结果的大小难以预计等因素使得代价的精确估计常常比较困难。
　　目前的商品化RDBMS大都采用基于代价的优化算法。这种方法要求优化器充分考虑系统中的各种参数（如缓冲区大小、表的大小、数据的分布、存取路径等），通过某种代价模型计算出各种查询执行方案的执行代价，然后选取代价最小的执行方案。在集中式数据库中，查询的执行开销主要包括：
　　总代价 = I/O代价 + CPU代价
　　在多用户环境下，内存在多个用户间的分配情况会明显地影响这些用户查询执行的总体性能。例如，如果系统分配给某个用户大量的内存用于其查询处理，这固然会加速该用户查询的执行，但是却可能使系统内的其他用户得不到足够的内存而影响其查询处理速度。因此，多用户数据库还应考虑查询的内存开销，即：
　　总代价 = I/O代价 + CPU代价 + 内存代价
　　4.2.2 一个实例
　　4.2.3 查询优化的一般准则
　　下面的优化策略一般能提高查询效率，但不一定是所有策略中最优的。其实“优化”一词并不确切，也许“改进”或“改善”更恰当些。
　　1. 选择运算应尽可能先做。在优化策略中这是最重要、最基本的一条。它常常可使执行时节约几个数量级，因为选择运算一般使计算的中间结果大大变小。
　　2. 在执行连接前对关系适当地预处理。预处理方法主要有两种，在连接属性上建立索引和对关系排序，然后执行连接。第一种称为索引连接方法；第二种称为排序合并（SORT-MERGE）连接方法。
　　3. 把投影运算和选择运算同时进行。如有若干投影和选择运算，并且它们都对同一个关系操作，则可以在扫描此关系的同时完成所有的这些运算以避免重复扫描关系。
　　4. 把投影同其前或其后的双目运算结合起来，没有必要为了去掉某些字段而扫描一遍关系。
　　5. 把某些选择同在它前面要执行的笛卡尔积结合起来成为一个连接运算，连接特别是等连接运算要比同样关系上的笛卡尔积省很多时间(如4.2.2节中的实例)。
　　6. 找出公共子表达式。如果这种重复出现的子表达式的结果不是很大的关系，并且从外存中读入这个关系比计算该子表达式的时间少得多，则先计算一次公共子表达式并把结果写入中间文件是合算的。当查询的是视图时，定义视图的表达式就是公共子表达式的情况。
　　4.2.4 关系代数等价变换规则
　　上面的优化策略大部分都涉及到代数表达式的变换。在第二、三章中介绍了各种查询语言，这些语言都可以转换成关系代数表达式。因此关系代数表达式的优化是查询优化的基本课题。而研究关系代数表达式的优化最好从研究关系表达式的等价变换规则开始。所谓关系代数表达式的等价是指用相同的关系代替两个表达式中相应的关系所得到的结果是相同的。
　　4.2.5 关系代数表达式的优化算法
　　应用上面的变换法则来优化关系表达式，使优化后的表达式能遵循4.2.3节中的一般原则。例如把选择和投影尽可能地早做(即把它们移到表达式语法树的下部)。下面给出关系表达式的优化算法。
　　4.2.6 优化的一般步骤
　　各个关系系统的优化方法不尽相同，大致的步骤可以归纳如下:
　　（1）把查询转换成某种内部表示
　　（2）把语法树转换成标准(优化)形式
　　（3）选择低层的存取路径
　　（4）生成查询计划，选择代价最小的
 