第一节 计算机安全性概论

数据库的安全性是指保护数据库以防止不合法的使用所造成的数据泄露、更改或破坏。
　　安全性问题不是数据库系统所独有的，所有计算机系统都有这个问题。只是在数据库系统中大量数据集中存放，而且为许多最终用户直接共享，从而使安全性问题更为突出。系统安全保护措施是否有效是数据库系统的主要指标之一。
　　数据库的安全性和计算机系统的安全性，包括操作系统、网络系统的安全性是紧密联系、相互支持的，因此在讨论数据库的安全性之前首先讨论计算机系统安全性的一般问题。
　　9.1.1 计算机系统的三类安全性问题 
　　所谓计算机系统安全性，是指为计算机系统建立和采取的各种安全保护措施，以保护计算机系统中的硬件、软件及数据，防止其因偶然或恶意的原因使系统遭到破坏，数据遭到更改或泄露等。计算机安全不仅涉及到计算机系统本身的技术问题、管理问题，还涉及法学、犯罪学、心理学的问题。其内容包括了计算机安全理论与策略；计算机安全技术、安全管理、安全评价、安全产品以及计算机犯罪与侦察、计算机安全法律、安全监察等。概括起来，计算机系统的安全性问题可分为三大类，即技术安全类、管理安全类和政策法律类。
　　 
　　技术安全是指计算机系统中采用具有一定安全性的硬件、软件来实现对计算机系统及其所存数据的安全保护，当计算机系统受到无意或恶意的攻击时仍能保证系统正常运行，保证系统内的数据不增加、不丢失、不泄露。技术安全之外的，诸如软硬件意外故障、场地的意外事故、管理不善导致的计算机设备和数据介质的物理破坏、丢失等安全问题，视为管理安全。而政策法律类则指政府部门建立的有关计算机犯罪、数据安全保密的法律道德准则和政策法规、法令，本书只讨论技术安全类。
　　 随着计算机资源共享和网络技术的应用日益广泛和深入，特别是Internet技术的发展，计算机安全性问题越来越得到人们的重视。对各种计算机及其相关产品、信息系统的安全性要求越来越高。为此，在计算机安全技术方面逐步发展建立了一套可信（Trusted）计算机系统的概念和标准。只有建立了完善的可信或安全标准，才能规范和指导安全计算机系统部件的生产，比较准确地测定产品的安全性能指标，满足民用和国防的需要。
　　9.1.2 可信计算机系统评测标准
　　为降低进而消除对系统的安全攻击，尤其是弥补原有系统在安全保护方面的缺陷，在计算机安全技术方面逐步建立了一套可信标准。在目前各国所引用或制定的一系列安全标准中，最重要的当推1985年美国国防部（DoD）正式颁布的《 DoD可信计算机系统评估标准》
　　制定这个标准的目的主要有：
　　（1）提供一种标准，使用户可以对其计算机系统内敏感信息安全操作的可信程度做评估。
　　（2）给计算机行业的制造商提供一种可循的指导规则，使其产品能够更好地满足敏感应用的安全需求。
　　TCSEC又称桔皮书，1991年4月美国NCSC（国家计算机安全中心）颁布了《可信计算机系统评估标准关于可信数据库系统的解释》（ Trusted Database Interpretation 简称TDI，即紫皮书）。将TCSEC扩展到数据库管理系统。TDI中定义了数据库管理系统的设计与实现中需满足和用以进行安全性级别评估的标准。
　　以下着重介绍TDI/TCSEC标准的基本内容。
　　TDI与TCSEC一样，从以下四个方面来描述安全性级别划分的指标：安全策略、责任、保证和文档。每个方面又细分为若干项。
　　根据计算机系统对上述各项指标的支持情况，TCSEC（TDI）将系统划分为四组(division)七个等级，依次是D；C（C1，C2）；B（B1，B2，B3）；A（A1），按系统可靠或可信程度逐渐增高，如表9.1所示。
　　在TCSEC中建立的安全级别之间具有一种偏序向下兼容的关系，即较高安全性级别提供的安全保护要包含较低级别的所有保护要求，同时提供更多或更完善的保护能力。
　　下面，简略地对各个等级作一介绍。
　　D级 D级是最低级别。保留D级的目的是为了将一切不符合更高标准的系统，统统归于D组。如DOS就是操作系统中安全标准为D的典型例子。它具有操作系统的基本功能，如文件系统，进程调度等，但在安全性方面几乎没有什么专门的机制来保障。
　　C1级 只提供了非常初级的自主安全保护。能够实现对用户和数据的分离，进行自主存取控制（DAC），保护或限制用户权限的传播。现有的商业系统往往稍作改进即可满足要求。
　　C2级 实际是安全产品的最低档次，提供受控的存取保护，即将C1级的DAC进一步细化，以个人身份注册负责，并实施审计和资源隔离。很多商业产品已得到该级别的认证。达到C2级的产品在其名称中往往不突出“安全”(Security)这一特色，如操作系统中Microsoft的Windows NT 3.5，数字设备公司的Open VMS VAX 6.0和6.1。数据库产品有Oracle公司的Oracle 7，Sybase公司的 SQL Server 11.0.6 等。
　　B1级 标记安全保护。对系统的数据加以标记，并对标记的主体和客体实施强制存取控制（MAC）以及审计等安全机制。B1级能够较好地满足大型企业或一般政府部门对于数据的安全需求，这一级别的产品才认为是真正意义上的安全产品。满足此级别的产品前一般多冠以“安全”(Security)或“可信的”(Trusted)字样，作为区别于普通产品的安全产品出售。
　　B2级 结构化保护。建立形式化的安全策略模型并对系统内的所有主体和客体实施DAC和MAC。
　　从互联网上的最新资料看，经过认证的、B2级以上的安全系统非常稀少。例如，符合B2标准的操作系统只有Trusted Information Systems公司的Trusted XENIX一种产品，符合B2标准的网络产品只有Cryptek Secure Communications公司的LLC VSLAN一种产品，而数据库方面则没有符合B2标准的产品。
　　B3级 安全域。该级的TCB必须满足访问监控器的要求，审计跟踪能力更强，并提供系统恢复过程。
　　A1级 验证设计，即提供B3级保护的同时给出系统的形式化设计说明和验证以确信各安全保护真正实现。


第二节 数据库安全性控制

安全模型中，用户要求进入计算机系统时，系统首先根据输入的用户标识进行用户身份鉴定，只有合法的用户才准许进入计算机系统。对已进入系统的用户，DBMS还要进行存取控制，只允许用户执行合法操作。操作系统一级也会有自己的保护措施。数据最后还可以以密码形式存储到数据库中。操作系统一级的安全保护措施可参考操作系统的有关书籍，这里不再详叙。另外对于强力逼迫透露口令、盗窃物理存储设备等行为而采取的保安措施，例如出入机房登记、加锁等，也不在这里讨论之列。
　　这里只讨论与数据库有关的用户标识和鉴定、存取控制、视图和密码存储等安全技术。
　　9.2.1 用户标识与鉴别
　　用户标识和鉴别是系统提供的最外层安全保护措施。其方法是由系统提供一定的方式让用户标识自己的名字或身份。每次用户要求进入系统时，由系统进行核对，通过鉴定后才提供机器使用权。
　　对于获得上机权的用户若要使用数据库时数据库管理系统还要进行用户标识和鉴定。
　　 
　　用户标识和鉴定的方法有很多种，而且在一个系统中往往是多种方法并举，以获得更强的安全性。常用的方法有：
　　用一个用户名或者用户标识号来标明用户身份。系统内部记录着所有合法用户的标识，系统鉴别此用户是否是合法用户，若是，则可以进入下一步的核实；若不是，则不能使用系统。
　　口令（Password） 为了进一步核实用户，系统常常要求用户输入口令。为保密起见，用户在终端上输入的口令不显示在屏幕上。系统核对口令以鉴别用户身份。
　　通过用户名和口令来鉴定用户的方法简单易行，但用户名与口令容易被人窃取，因此还可以用更复杂的方法。例如每个用户都预先约定好一个计算过程或者函数，鉴别用户身份时，系统提供一个随机数，用户根据自己预先约定的计算过程或者函数进行计算，系统根据用户计算结果是否正确进一步鉴定用户身份。用户可以约定比较简单的计算过程或函数，以便计算起来方便；也可以约定比较复杂的计算过程或函数，以便安全性更好。
　　用户标识和鉴定可以重复多次。
　　9.2.2 存取控制
　　数据库安全性所关心的主要是DBMS的存取控制机制。数据库安全最重要的一点就是确保只授权给有资格的用户访问数据库的权限，同时令所有未被授权的人员无法接近数据，这主要通过数据库系统的存取控制机制实现。
　　存取控制机制主要包括两部分：
　　1. 定义用户权限，并将用户权限登记到数据字典中。用户权限是指不同的用户对于不同的数据对象允许执行的操作权限。系统必须提供适当的语言定义用户权限，这些定义经过编译后存放在数据字典中，被称作安全规则或授权规则。
　　2. 合法权限检查，每当用户发出存取数据库的操作请求后（请求一般应包括操作类型、操作对象和操作用户等信息），DBMS查找数据字典，根据安全规则进行合法权限检查，若用户的操作请求超出了定义的权限，系统将拒绝执行此操作。
　　用户权限定义和合法权检查机制一起组成了DBMS的安全子系统。
　　前面已经讲到，当前大型的DBMS一般都支持C2级中的自主存取控制（DAC），有些DBMS同时还支持B1级中的强制存取控制（MAC）。
　　这两类方法的简单定义是：
　　（1）在自主存取控制方法中，用户对于不同的数据对象有不同的存取权限，不同的用户对同一对象也有不同的权限，而且用户还可将其拥有的存取权限转授给其他用户。因此自主存取控制非常灵活。
　　（2）在强制存取控制方法中，每一个数据对象被标以一定的密级，每一个用户也被授予某一个级别的许可证。对于任意一个对象，只有具有合法许可证的用户才可以存取。强制存取控制因此相对比较严格。
　　下面介绍这两种存取控制方法 
　　9.2.3 自主存取控制（DAC）方法
　　大型数据库管理系统几乎都支持自主存取控制，目前的SQL标准也对自主存取控制提供支持，这主要通过 SQL 的 GRANT 语句和 REVOKE 语句来实现。
　　用户权限是由两个要素组成的：数据对象和操作类型。定义一个用户的存取权限就是要定义这个用户可以在哪些数据对象上进行哪些类型的操作。在数据库系统中，定义存取权限称为授权（Authorization）。
　　在非关系系统中，用户只能对数据进行操作，存取控制的数据对象也仅限于数据本身。而关系数据库系统中，DBA可以把建立、修改基本表的权限授予用户，用户获得此权限后可以建立和修改基本表、索引、视图。因此，关系系统中存取控制的数据对象不仅有数据本身，如表、属性列等，还有模式、外模式、内模式等数据字典中的内容。
　　9.2.4 强制存取控制（MAC）方法
　　所谓MAC是指系统为保证更高程度的安全性，按照TDI TCSEC标准中安全策略的要求，所采取的强制存取检查手段。它不是用户能直接感知或进行控制的。MAC适用于那些对数据有严格而固定密级分类的部门，例如军事部门或政府部门。
　　9.2.5 视图机制
　　进行存取权限控制时可以为不同的用户定义不同的视图，把数据对象限制在一定的范围内，也就是说，通过视图机制把要保密的数据对无权存取的用户隐藏起来，从而自动地对数据提供一定程度的安全保护。
　　9.2.6 审计（Audit）
　　前面讲的用户标识与鉴别、存取控制仅是安全性标准的一个重要方面（安全策略方面）不是全部。为了使DBMS达到一定的安全级别，还需要在其他方面提供相应的支持。例如按照TDI TCSEC标准中安全策略的要求，“审计”功能就是DBMS达到C2以上安全级别必不可少的一项指标。
　　因为任何系统的安全保护措施都不是完美无缺的，蓄意盗窃、破坏数据的人总是想方设法打破控制。审计功能把用户对数据库的所有操作自动记录下来放入审计日志（Audit Log）中。DBA可以利用审计跟踪的信息，重现导致数据库现有状况的一系列事件，找出非法存取数据的人、时间和内容等。
　　审计通常是很费时间和空间的，所以DBMS往往都将其作为可选特征，允许DBA根据应用对安全性的要求，灵活地打开或关闭审计功能。审计功能一般主要用于安全性要求较高的部门。
　　9.2.7 数据加密
　　对于高度敏感性数据，例如财务数据、军事数据、国家机密，除以上安全性措施外，还可以采用数据加密技术。
　　数据加密是防止数据库中数据在存储和传输中失密的有效手段。加密的基本思想是根据一定的算法将原始数据（术语为明文，Plain text）变换为不可直接识别的格式（术语为密文，Cipher text），从而使得不知道解密算法的人无法获知数据的内容。
　　 
　　加密方法主要有两种，一种是替换方法，该方法使用密钥（Encryption Key）将明文中的每一个字符转换为密文中的一个字符。另一种是置换方法，该方法仅将明文的字符按不同的顺序重新排列。单独使用这两种方法的任意一种都是不够安全的。但是将这两种方法结合起来就能提供相当高的安全程度。采用这种结合算法的例子是美国1977年制定的官方加密标准，数据加密标准（Data Encryption Standard，简称DES）。
　　有关DES密钥加密技术及密钥管理问题等已超出本书范围，这里不再讨论。
　　目前有些数据库产品提供了数据加密例行程序，可根据用户的要求自动对存储和传输的数据进行加密处理。另一些数据库产品虽然本身未提供加密程序，但提供了接口，允许用户用其他厂商的加密程序对数据加密。
　　由于数据加密与解密也是比较费时的操作，而且数据加密与解密程序会占用大量系统资源，因此数据加密功能通常也作为可选特征，允许用户自由选择，只对高度机密的数据加密。
 


第三节 统计数据库安全性

一般地，统计数据库允许用户查询聚集类型的信息（例如合计、平均值等），但是不允许查询单个记录信息。例如，查询“程序员的平均工资是多少？”是合法的，但是查询“程序员张勇的工资是多少？”就不允许。
　　在统计数据库中存在着特殊的安全性问题，即可能存在着隐蔽的信息通道，使得可以从合法的查询中推导出不合法的信息。例如下面两个查询都是合法的：
　　· 本公司共有多少女高级程序员？
　　· 本公司女高级程序员的工资总额是多少？
　　如果第1个查询的结果是“1”，那么第2个查询的结果显然就是这个程序员的工资数。这样统计数据库的安全性机制就失效了。为了解决这个问题，可以规定任何查询至少要涉及N个以上的记录(N足够大)。但是即使这样，还是存在另外的泄密途径，看下面的例子：
　　某个用户A想知道另一用户B的工资数额，他可以通过下列两个合法查询获取：
　　· 用户A和其他N个程序员的工资总额是多少？
　　· 用户B和其他N个程序员的工资总额是多少？
　　假设第一个查询的结果是X，第二个查询的结果是Y，由于用户A知道自己的工资是Z，那么他可以计算出用户B的工资=Y-(X-Z)。
　　这个例子的关键之处在于两个查询之间有很多重复的数据项（即其他N个程序员的工资）。因此可以再规定任意两个查询的相交数据项不能超过M个。这样就使得获取他人的数据更加困难了。可以证明，在上述两条规定下，如果想获知用户B的工资额，用户A至少需要进行1+(N-2)/M次查询。
　　当然可以继续规定任一用户的查询次数不能超过1+(N-2)/M，但是如果两个用户合作查询就可以使这一规定仍然失效。
　　另外还有其他一些方法用于解决统计数据库的安全性问题，例如数据污染。但是无论采用什么安全性机制，都仍然会存在绕过这些机制的途径。好的安全性措施应该使得那些试图破坏安全的人所花费的代价远远超过他们所得到的利益，这也是整个数据库安全机制设计的目标。



第四节 Oracle数据库的安全性措施

下面介绍Oracle的安全性措施，使读者能进一步理解前面讨论的数据库安全性的基本方法。
　　Oracle的安全措施主要有三个方面，一是用户标识和鉴定；二是授权和检查机制；三是审计技术（是否使用审计技术可由用户灵活选择）；除此之外，Oracle还允许用户通过触发器灵活定义自己的安全性措施。
　　一、用户标识和鉴定
　　在Oracle中，最外层的安全性措施是让用户标识自己的名字，然后由系统进行核实。Oracle允许用户重复标识三次，如果三次未通过，系统自动退出。
　　二、授权与检查机制
　　Oracle的授权和检查机制与前面讲的存取控制方法基本相同。
　　Oracle的权限包括系统权限和数据库对象的权限两类，采用非集中的授权机制，即DBA负责授予与回收系统权限，每个用户授予与回收自己创建的数据库对象的权限。
　　Oracle允许重复授权，即可将某一权限多次授予同一用户，系统不会出错。Oracle也允许无效回收，即用户没有某种权限，但回收此权限的操作仍算成功。
　　1. 系统权限
　　Oracle提供了80多种系统权限，如创建会话、创建表、创建视图、创建用户等。DBA在创建一个用户时需要将其中的一些权限授予该用户。
　　 
　　Oracle支持角色的概念。所谓角色就是一组系统权限的集合，目的在于减化权限管理。Oracle除允许DBA定义角色外，还提供了预定义的角色，如CONNECT，RESOURCE和DBA。
　　具有CONNECT角色的用户可以登录数据库，执行数据查询和操纵。即可以执行ALTER TABLE，CREATE VIEW，CREATE INDEX，DROP TABLE，DROP VIEW，DROP INDEX，GRANT，REVOKE，INSERT，SELECT，UPDATE，DELETE，AUDIT，NOAUDIT等操作。
　　RESOURCE角色可以创建表，即执行CREATE TABLE操作。创建表的用户将拥有对该表的所有权限。
　　DBA角色可以执行某些授权命令，创建表，对任何表的数据进行操纵。它涵盖了前两种角色，此外还可以执行一些管理操作，DBA角色拥有最高级别的权限。
　　例如DBA建立一用户U1后，欲将ALTER TABLE，CREATE VIEW，CREATE INDEX，DROP TABLE，DROP VIEW，DROP INDEX，GRANT，REVOKE，INSERT ，SELECT，UPDATE，DELETE，AUDIT，NOAUDIT等系统权限授予U1，则可以只简单地将CONNECT角色授予U1即可：
　　GRANT CONNECT TO U1；
　　这样就可以省略十几条GRANT语句。
　　2. 数据库对象的权限
　　在Oracle中，可以授权的数据库对象包括基本表、视图、序列、同义词、存储过程、函数等，其中最重要的是基本表。
　　对于基本表Oracle支持三个级别的安全性：表级、行级和列级。
　　（1）表级安全性
　　表的创建者或DBA可以把表级权限授予其他用户，表级权限包括：
　　 ALTER：修改表定义
　　 DELETE：删除表记录
　　 INDEX：在表上建索引
　　 INSERT：向表中插入数据记录
　　 SELECT：查找表中记录
　　 UPDATE：修改表中的数据
　　 ALL：上述所有权限
　　表级授权使用GRANT和REVOKE语句，其语法与第三章中介绍的基本一致。
　　（2）行级安全性
　　Oracle行级安全性由视图实现。用视图定义表的水平子集，限定用户在视图上的操作，就为表的行级提供了保护。视图上的授权与回收与表级完全相同。
　　例如，只允许用户U2查看Student表中信息系学生的数据，则首先创建信息系学生视图S_IS，然后将该视图的SELECT权限授予U2用户。
　　（3）列级安全性
　　Oracle列级安全性可以由视图实现，也可以直接在基本表上定义。
　　用视图定义表的垂直子集就可以实现列级安全性，方法与上面类似。
　　直接在基本表上定义和回收列级权限也是使用GRANT和REVOKE语句。目前Oracle的列级权限只有UPDATE，回收列级UPDATE权限时，Oracle不允许一列一列地回收，只能回收整个表的UPDATE权限。例如，
　　GRANT UPDATE(Sno，Cno)
　　ON SC 
　　TO U2；
　　把对SC表中Sno列和Cno列的UPDATE权限授予U2用户。
　　REVOKE UPDATE ON SC FROM U2；
　　回收了U2用户对SC表中Sno列和Cno列的UPDATE权限。
　　在Oracle中，表、行、列三级对象自上而下构成一个层次结构，其中上一级对象的权限制约下一级对象的权限。例如当一个用户拥有了对某个表的UPDATE权限，即相当于在表的所有列都拥有了UPDATE权限。
　　Oracle对数据库对象的权限采用分散控制方式，允许具有WITH GRANT OPTION的用户把相应权限或其子集传递授予其他用户，但不允许循环授权，即被授权者不能把权限再授回给授权者或其祖先Oracle把所有权限信息记录在数据字典中。当用户进行数据库操作时，Oracle首先根据数据字典中的权限信息，检查操作的合法性。在Oracle中，安全性检查是任何数据库操作的第一步。
　　三、Oracle的审计技术
　　在Oracle中，审计分为用户级审计和系统级审计。用户级审计是任何Oracle用户可设置的审计，主要是用户针对自己创建的数据库表或视图进行审计，记录所有用户对这些表或视图的一切成功和（或）不成功的访问要求以及各种类型的SQL操作。
　　系统级审计只能由DBA设置，用以监测成功或失败的登录要求、监测GRANT和REVOKE操作以及其他数据库级权限下的操作。
　　 
　　Oracle的审计功能很灵活，是否使用审计，对哪些表进行审计，对哪些操作进行审计等都可以由用户选择。为此，Oracle提供了AUDIT语句设置审计功能，NOAUDIT语句取消审计功能。设置审计时，可以详细指定对哪些SQL操作进行审计。例如，
　　对修改SC表结构或数据的操作进行审计可使用如下语句：
　　 AUDIT ALTER， UPDATE ON SC；
　　取消对SC表的一切审计可使用如下语句：
　　 NOAUDIT ALL ON SC；
　　在Oracle中，审计设置以及审计内容均存放在数据字典中。其中审计设置记录在数据字典表SYS.TABLES中，审计内容记录在数据字典表SYS.AUDIT_TRAIL中。
　　四、用户定义的安全性措施
　　除了系统级的安全性措施外，Oracle还允许用户用数据库触发器定义特殊的更复杂的用户级安全性措施。例如，规定只能在工作时间内更新Student表，可以定义如下触发器，其中sysdate为系统当前时间：
　　 CREATE OR REPLACE TRIGGER secure_student
　　 BEFORE INSERT OR UPDATE OR DELETE ON Student
　　 BEGIN
　　 IF (TO_CHAR(sysdate，'DY') IN ('SAT'，'SUN'))
　　 OR (TO_NUMBER(sysdate，'HH24') NOT BETWEEN 8 AND 17) 
　　 THEN
　　 RAISE_APPLICATION_ERROR(-20506，
　　 'You may only change data during normal business hours.')
　　 END IF；
　　 END；
　　触发器一经定义便存放在数据字典中。用户每次对Student表执行INSERT，UPDATE或DELETE操作时都会自动触发该触发器，由系统检查当时的系统时间，如果是周六或周日，或者不是8点至17点，系统会拒绝执行用户的更新操作，并提示出错信息。
　　类似地，用户还可以利用触发器进一步细化审计规则，使审计操作的粒度更细。
　　综上所述，Oracle提供了多种安全性措施，提供了多级安全性检查，其安全性机制与操作系统的安全机制彼此独立，数据字典在Oracle的安全性授权和检查以及审计技术中起着重要作用。